
PROJECT_RTE_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001388  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800088  00800088  00001444  2**0
                  ALLOC
  3 .stab         00002310  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dcf  00000000  00000000  00003754  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bb 09 	call	0x1376	; 0x1376 <main>
      8a:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Lighting_Init>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	81 e0       	ldi	r24, 0x01	; 1
      9c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <RTE_Call_LampStatus>
      a0:	cf 91       	pop	r28
      a2:	df 91       	pop	r29
      a4:	08 95       	ret

000000a6 <Lighting_SetLamp>:
{
	return RTE_Call_LampStatus(LAMP_ON);
}

ErrorStatus Lighting_SetLamp(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <Lighting_SetLamp+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	u8 LampStatus;
	ErrorStatus ERROR;

	ERROR=RTE_Read_LampStatus(&LampStatus);
      b0:	ce 01       	movw	r24, r28
      b2:	02 96       	adiw	r24, 0x02	; 2
      b4:	0e 94 ba 00 	call	0x174	; 0x174 <RTE_Read_LampStatus>
      b8:	89 83       	std	Y+1, r24	; 0x01

	if(LampStatus==LAMP_ON)
      ba:	8a 81       	ldd	r24, Y+2	; 0x02
      bc:	81 30       	cpi	r24, 0x01	; 1
      be:	39 f4       	brne	.+14     	; 0xce <Lighting_SetLamp+0x28>
	{
		ERROR|=RTE_Call_LampStatus(LAMP_ON);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <RTE_Call_LampStatus>
      c6:	99 81       	ldd	r25, Y+1	; 0x01
      c8:	89 2b       	or	r24, r25
      ca:	89 83       	std	Y+1, r24	; 0x01
      cc:	0c c0       	rjmp	.+24     	; 0xe6 <Lighting_SetLamp+0x40>
	}
	else if(LampStatus==LAMP_OFF)
      ce:	8a 81       	ldd	r24, Y+2	; 0x02
      d0:	88 23       	and	r24, r24
      d2:	39 f4       	brne	.+14     	; 0xe2 <Lighting_SetLamp+0x3c>
	{
		ERROR|=RTE_Call_LampStatus(LAMP_OFF);
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <RTE_Call_LampStatus>
      da:	99 81       	ldd	r25, Y+1	; 0x01
      dc:	89 2b       	or	r24, r25
      de:	89 83       	std	Y+1, r24	; 0x01
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <Lighting_SetLamp+0x40>
	}
	else
	{
		ERROR=ERROR_NOK;
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return ERROR;
      e6:	89 81       	ldd	r24, Y+1	; 0x01
}
      e8:	0f 90       	pop	r0
      ea:	0f 90       	pop	r0
      ec:	cf 91       	pop	r28
      ee:	df 91       	pop	r29
      f0:	08 95       	ret

000000f2 <Dimmer_Init>:
#include "../../RTE/RTE.h"
#include "Dimmer.h"


ErrorStatus Dimmer_Init(void)
{
      f2:	df 93       	push	r29
      f4:	cf 93       	push	r28
      f6:	cd b7       	in	r28, 0x3d	; 61
      f8:	de b7       	in	r29, 0x3e	; 62
	return RTE_Write_LampStatus(LAMP_ON);
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	0e 94 ac 00 	call	0x158	; 0x158 <RTE_Write_LampStatus>
}
     100:	cf 91       	pop	r28
     102:	df 91       	pop	r29
     104:	08 95       	ret

00000106 <Dimmer_SendLampStatus>:

ErrorStatus Dimmer_SendLampStatus(void)
{
     106:	df 93       	push	r29
     108:	cf 93       	push	r28
     10a:	00 d0       	rcall	.+0      	; 0x10c <Dimmer_SendLampStatus+0x6>
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	u8 DoorStatus;
	ErrorStatus ERROR;

	ERROR=RTE_Call_ReceiveCOMM(0,&DoorStatus);
     110:	9e 01       	movw	r18, r28
     112:	2e 5f       	subi	r18, 0xFE	; 254
     114:	3f 4f       	sbci	r19, 0xFF	; 255
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	b9 01       	movw	r22, r18
     11a:	0e 94 cc 00 	call	0x198	; 0x198 <RTE_Call_ReceiveCOMM>
     11e:	89 83       	std	Y+1, r24	; 0x01

	if(DoorStatus==DOOR_OPEN)
     120:	8a 81       	ldd	r24, Y+2	; 0x02
     122:	81 30       	cpi	r24, 0x01	; 1
     124:	39 f4       	brne	.+14     	; 0x134 <Dimmer_SendLampStatus+0x2e>
	{
		ERROR|=RTE_Write_LampStatus(LAMP_ON);
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	0e 94 ac 00 	call	0x158	; 0x158 <RTE_Write_LampStatus>
     12c:	99 81       	ldd	r25, Y+1	; 0x01
     12e:	89 2b       	or	r24, r25
     130:	89 83       	std	Y+1, r24	; 0x01
     132:	0c c0       	rjmp	.+24     	; 0x14c <Dimmer_SendLampStatus+0x46>
	}
	else if(DoorStatus==DOOR_CLOSED)
     134:	8a 81       	ldd	r24, Y+2	; 0x02
     136:	88 23       	and	r24, r24
     138:	39 f4       	brne	.+14     	; 0x148 <Dimmer_SendLampStatus+0x42>
	{
		ERROR|=RTE_Write_LampStatus(LAMP_OFF);
     13a:	80 e0       	ldi	r24, 0x00	; 0
     13c:	0e 94 ac 00 	call	0x158	; 0x158 <RTE_Write_LampStatus>
     140:	99 81       	ldd	r25, Y+1	; 0x01
     142:	89 2b       	or	r24, r25
     144:	89 83       	std	Y+1, r24	; 0x01
     146:	02 c0       	rjmp	.+4      	; 0x14c <Dimmer_SendLampStatus+0x46>
	}
	else
	{
		ERROR=ERROR_NOK;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	89 83       	std	Y+1, r24	; 0x01
	}

	return ERROR;
     14c:	89 81       	ldd	r24, Y+1	; 0x01
}
     14e:	0f 90       	pop	r0
     150:	0f 90       	pop	r0
     152:	cf 91       	pop	r28
     154:	df 91       	pop	r29
     156:	08 95       	ret

00000158 <RTE_Write_LampStatus>:
};

/* RTE Sender/Receiver */

ErrorStatus RTE_Write_LampStatus(u8 Data)
{
     158:	df 93       	push	r29
     15a:	cf 93       	push	r28
     15c:	0f 92       	push	r0
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	89 83       	std	Y+1, r24	; 0x01
	LampStatus=Data;
     164:	89 81       	ldd	r24, Y+1	; 0x01
     166:	80 93 60 00 	sts	0x0060, r24
	return ERROR_OK;
     16a:	80 e0       	ldi	r24, 0x00	; 0
}
     16c:	0f 90       	pop	r0
     16e:	cf 91       	pop	r28
     170:	df 91       	pop	r29
     172:	08 95       	ret

00000174 <RTE_Read_LampStatus>:

ErrorStatus RTE_Read_LampStatus(u8 *Data)
{
     174:	df 93       	push	r29
     176:	cf 93       	push	r28
     178:	00 d0       	rcall	.+0      	; 0x17a <RTE_Read_LampStatus+0x6>
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	9a 83       	std	Y+2, r25	; 0x02
     180:	89 83       	std	Y+1, r24	; 0x01
	*Data=LampStatus;
     182:	80 91 60 00 	lds	r24, 0x0060
     186:	e9 81       	ldd	r30, Y+1	; 0x01
     188:	fa 81       	ldd	r31, Y+2	; 0x02
     18a:	80 83       	st	Z, r24
	return ERROR_OK;
     18c:	80 e0       	ldi	r24, 0x00	; 0
}
     18e:	0f 90       	pop	r0
     190:	0f 90       	pop	r0
     192:	cf 91       	pop	r28
     194:	df 91       	pop	r29
     196:	08 95       	ret

00000198 <RTE_Call_ReceiveCOMM>:

/* RTE Client/Server */


ErrorStatus RTE_Call_ReceiveCOMM(u8 ID, u8 *Data)
{
     198:	df 93       	push	r29
     19a:	cf 93       	push	r28
     19c:	00 d0       	rcall	.+0      	; 0x19e <RTE_Call_ReceiveCOMM+0x6>
     19e:	0f 92       	push	r0
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	89 83       	std	Y+1, r24	; 0x01
     1a6:	7b 83       	std	Y+3, r23	; 0x03
     1a8:	6a 83       	std	Y+2, r22	; 0x02
	return COMM_Receive(ID,Data);
     1aa:	2a 81       	ldd	r18, Y+2	; 0x02
     1ac:	3b 81       	ldd	r19, Y+3	; 0x03
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	b9 01       	movw	r22, r18
     1b2:	0e 94 0f 08 	call	0x101e	; 0x101e <COMM_Receive>
}
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	cf 91       	pop	r28
     1be:	df 91       	pop	r29
     1c0:	08 95       	ret

000001c2 <RTE_Call_LampStatus>:

ErrorStatus RTE_Call_LampStatus(u8 Data)
{
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	0f 92       	push	r0
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
     1cc:	89 83       	std	Y+1, r24	; 0x01
	return DIO_SetPinValue(LAMP_PORT,LAMP_PIN,Data);
     1ce:	80 e0       	ldi	r24, 0x00	; 0
     1d0:	62 e0       	ldi	r22, 0x02	; 2
     1d2:	49 81       	ldd	r20, Y+1	; 0x01
     1d4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_SetPinValue>
}
     1d8:	0f 90       	pop	r0
     1da:	cf 91       	pop	r28
     1dc:	df 91       	pop	r29
     1de:	08 95       	ret

000001e0 <RTE_Init>:

/* OS */


void RTE_Init(void)
{
     1e0:	df 93       	push	r29
     1e2:	cf 93       	push	r28
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
	COMM_Init();
     1e8:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <COMM_Init>
	DIO_Dimmer_Init();
     1ec:	0e 94 a2 07 	call	0xf44	; 0xf44 <DIO_Dimmer_Init>
	Dimmer_Init();
     1f0:	0e 94 79 00 	call	0xf2	; 0xf2 <Dimmer_Init>
	Lighting_Init();
     1f4:	0e 94 49 00 	call	0x92	; 0x92 <Lighting_Init>
	Scheduler_SuspendTask(0);
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Scheduler_SuspendTask>
}
     1fe:	cf 91       	pop	r28
     200:	df 91       	pop	r29
     202:	08 95       	ret

00000204 <RTE_Runnable>:

void RTE_Runnable(void)
{
     204:	df 93       	push	r29
     206:	cf 93       	push	r28
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
	COMM_Rx_MainFunction();
     20c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <COMM_Rx_MainFunction>
	Dimmer_SendLampStatus();
     210:	0e 94 83 00 	call	0x106	; 0x106 <Dimmer_SendLampStatus>
	Lighting_SetLamp();
     214:	0e 94 53 00 	call	0xa6	; 0xa6 <Lighting_SetLamp>

}
     218:	cf 91       	pop	r28
     21a:	df 91       	pop	r29
     21c:	08 95       	ret

0000021e <UART_Init>:
#define PARITY		4			/*Parity Location*/

#define STOPBIT		3			/*StopBit Location*/

ErrorStatus UART_Init(void)
{
     21e:	df 93       	push	r29
     220:	cf 93       	push	r28
     222:	00 d0       	rcall	.+0      	; 0x224 <UART_Init+0x6>
     224:	0f 92       	push	r0
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus ERROR=ERROR_OK;
     22a:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRB,TXEN);
     22c:	aa e2       	ldi	r26, 0x2A	; 42
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	ea e2       	ldi	r30, 0x2A	; 42
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	88 60       	ori	r24, 0x08	; 8
     238:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     23a:	aa e2       	ldi	r26, 0x2A	; 42
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	ea e2       	ldi	r30, 0x2A	; 42
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	80 61       	ori	r24, 0x10	; 16
     246:	8c 93       	st	X, r24

	switch(UART_init.UART_DataSize)
     248:	80 91 80 00 	lds	r24, 0x0080
     24c:	28 2f       	mov	r18, r24
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	3b 83       	std	Y+3, r19	; 0x03
     252:	2a 83       	std	Y+2, r18	; 0x02
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	9b 81       	ldd	r25, Y+3	; 0x03
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	91 05       	cpc	r25, r1
     25c:	09 f4       	brne	.+2      	; 0x260 <UART_Init+0x42>
     25e:	48 c0       	rjmp	.+144    	; 0x2f0 <UART_Init+0xd2>
     260:	2a 81       	ldd	r18, Y+2	; 0x02
     262:	3b 81       	ldd	r19, Y+3	; 0x03
     264:	23 30       	cpi	r18, 0x03	; 3
     266:	31 05       	cpc	r19, r1
     268:	54 f4       	brge	.+20     	; 0x27e <UART_Init+0x60>
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	00 97       	sbiw	r24, 0x00	; 0
     270:	99 f0       	breq	.+38     	; 0x298 <UART_Init+0x7a>
     272:	2a 81       	ldd	r18, Y+2	; 0x02
     274:	3b 81       	ldd	r19, Y+3	; 0x03
     276:	21 30       	cpi	r18, 0x01	; 1
     278:	31 05       	cpc	r19, r1
     27a:	21 f1       	breq	.+72     	; 0x2c4 <UART_Init+0xa6>
     27c:	7b c0       	rjmp	.+246    	; 0x374 <UART_Init+0x156>
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	9b 81       	ldd	r25, Y+3	; 0x03
     282:	83 30       	cpi	r24, 0x03	; 3
     284:	91 05       	cpc	r25, r1
     286:	09 f4       	brne	.+2      	; 0x28a <UART_Init+0x6c>
     288:	49 c0       	rjmp	.+146    	; 0x31c <UART_Init+0xfe>
     28a:	2a 81       	ldd	r18, Y+2	; 0x02
     28c:	3b 81       	ldd	r19, Y+3	; 0x03
     28e:	24 30       	cpi	r18, 0x04	; 4
     290:	31 05       	cpc	r19, r1
     292:	09 f4       	brne	.+2      	; 0x296 <UART_Init+0x78>
     294:	59 c0       	rjmp	.+178    	; 0x348 <UART_Init+0x12a>
     296:	6e c0       	rjmp	.+220    	; 0x374 <UART_Init+0x156>
	{
	case UART_DATA_5BITS:
		CLR_BIT(UCSRB,UCSZ2); CLR_BIT(UCSRC,UCSZ1); CLR_BIT(UCSRC,UCSZ0);
     298:	aa e2       	ldi	r26, 0x2A	; 42
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	ea e2       	ldi	r30, 0x2A	; 42
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	8b 7f       	andi	r24, 0xFB	; 251
     2a4:	8c 93       	st	X, r24
     2a6:	a0 e4       	ldi	r26, 0x40	; 64
     2a8:	b0 e0       	ldi	r27, 0x00	; 0
     2aa:	e0 e4       	ldi	r30, 0x40	; 64
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	80 81       	ld	r24, Z
     2b0:	8b 7f       	andi	r24, 0xFB	; 251
     2b2:	8c 93       	st	X, r24
     2b4:	a0 e4       	ldi	r26, 0x40	; 64
     2b6:	b0 e0       	ldi	r27, 0x00	; 0
     2b8:	e0 e4       	ldi	r30, 0x40	; 64
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	8d 7f       	andi	r24, 0xFD	; 253
     2c0:	8c 93       	st	X, r24
     2c2:	5a c0       	rjmp	.+180    	; 0x378 <UART_Init+0x15a>
		break;
	case UART_DATA_6BITS:
		CLR_BIT(UCSRB,UCSZ2); CLR_BIT(UCSRC,UCSZ1); SET_BIT(UCSRC,UCSZ0);
     2c4:	aa e2       	ldi	r26, 0x2A	; 42
     2c6:	b0 e0       	ldi	r27, 0x00	; 0
     2c8:	ea e2       	ldi	r30, 0x2A	; 42
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	8b 7f       	andi	r24, 0xFB	; 251
     2d0:	8c 93       	st	X, r24
     2d2:	a0 e4       	ldi	r26, 0x40	; 64
     2d4:	b0 e0       	ldi	r27, 0x00	; 0
     2d6:	e0 e4       	ldi	r30, 0x40	; 64
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	8b 7f       	andi	r24, 0xFB	; 251
     2de:	8c 93       	st	X, r24
     2e0:	a0 e4       	ldi	r26, 0x40	; 64
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e0 e4       	ldi	r30, 0x40	; 64
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	80 81       	ld	r24, Z
     2ea:	82 60       	ori	r24, 0x02	; 2
     2ec:	8c 93       	st	X, r24
     2ee:	44 c0       	rjmp	.+136    	; 0x378 <UART_Init+0x15a>
		break;
	case UART_DATA_7BITS:
		CLR_BIT(UCSRB,UCSZ2); SET_BIT(UCSRC,UCSZ1); CLR_BIT(UCSRC,UCSZ0);
     2f0:	aa e2       	ldi	r26, 0x2A	; 42
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	ea e2       	ldi	r30, 0x2A	; 42
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	8b 7f       	andi	r24, 0xFB	; 251
     2fc:	8c 93       	st	X, r24
     2fe:	a0 e4       	ldi	r26, 0x40	; 64
     300:	b0 e0       	ldi	r27, 0x00	; 0
     302:	e0 e4       	ldi	r30, 0x40	; 64
     304:	f0 e0       	ldi	r31, 0x00	; 0
     306:	80 81       	ld	r24, Z
     308:	84 60       	ori	r24, 0x04	; 4
     30a:	8c 93       	st	X, r24
     30c:	a0 e4       	ldi	r26, 0x40	; 64
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	e0 e4       	ldi	r30, 0x40	; 64
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	80 81       	ld	r24, Z
     316:	8d 7f       	andi	r24, 0xFD	; 253
     318:	8c 93       	st	X, r24
     31a:	2e c0       	rjmp	.+92     	; 0x378 <UART_Init+0x15a>
		break;
	case UART_DATA_8BITS:
		CLR_BIT(UCSRB,UCSZ2); SET_BIT(UCSRC,UCSZ1); SET_BIT(UCSRC,UCSZ0);
     31c:	aa e2       	ldi	r26, 0x2A	; 42
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	ea e2       	ldi	r30, 0x2A	; 42
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	80 81       	ld	r24, Z
     326:	8b 7f       	andi	r24, 0xFB	; 251
     328:	8c 93       	st	X, r24
     32a:	a0 e4       	ldi	r26, 0x40	; 64
     32c:	b0 e0       	ldi	r27, 0x00	; 0
     32e:	e0 e4       	ldi	r30, 0x40	; 64
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	84 60       	ori	r24, 0x04	; 4
     336:	8c 93       	st	X, r24
     338:	a0 e4       	ldi	r26, 0x40	; 64
     33a:	b0 e0       	ldi	r27, 0x00	; 0
     33c:	e0 e4       	ldi	r30, 0x40	; 64
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	80 81       	ld	r24, Z
     342:	82 60       	ori	r24, 0x02	; 2
     344:	8c 93       	st	X, r24
     346:	18 c0       	rjmp	.+48     	; 0x378 <UART_Init+0x15a>
		break;
	case UART_DATA_9BITS:
		SET_BIT(UCSRB,UCSZ2); SET_BIT(UCSRC,UCSZ1); SET_BIT(UCSRC,UCSZ0);
     348:	aa e2       	ldi	r26, 0x2A	; 42
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	ea e2       	ldi	r30, 0x2A	; 42
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	84 60       	ori	r24, 0x04	; 4
     354:	8c 93       	st	X, r24
     356:	a0 e4       	ldi	r26, 0x40	; 64
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	e0 e4       	ldi	r30, 0x40	; 64
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	84 60       	ori	r24, 0x04	; 4
     362:	8c 93       	st	X, r24
     364:	a0 e4       	ldi	r26, 0x40	; 64
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	e0 e4       	ldi	r30, 0x40	; 64
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	82 60       	ori	r24, 0x02	; 2
     370:	8c 93       	st	X, r24
     372:	02 c0       	rjmp	.+4      	; 0x378 <UART_Init+0x15a>
		break;
	default: ERROR=ERROR_NOK;
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	UBRRL=UART_BAUD_9600;
     378:	e9 e2       	ldi	r30, 0x29	; 41
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	83 e3       	ldi	r24, 0x33	; 51
     37e:	80 83       	st	Z, r24

	UCSRB|=UART_init.UART_Interrupt_Tx_Enable<<TXCIE;
     380:	aa e2       	ldi	r26, 0x2A	; 42
     382:	b0 e0       	ldi	r27, 0x00	; 0
     384:	ea e2       	ldi	r30, 0x2A	; 42
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 81       	ld	r24, Z
     38a:	28 2f       	mov	r18, r24
     38c:	80 91 84 00 	lds	r24, 0x0084
     390:	88 2f       	mov	r24, r24
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	00 24       	eor	r0, r0
     396:	96 95       	lsr	r25
     398:	87 95       	ror	r24
     39a:	07 94       	ror	r0
     39c:	96 95       	lsr	r25
     39e:	87 95       	ror	r24
     3a0:	07 94       	ror	r0
     3a2:	98 2f       	mov	r25, r24
     3a4:	80 2d       	mov	r24, r0
     3a6:	82 2b       	or	r24, r18
     3a8:	8c 93       	st	X, r24
	UCSRB|=UART_init.UART_Interrupt_Rx_Enable<<RXCIE;
     3aa:	aa e2       	ldi	r26, 0x2A	; 42
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	ea e2       	ldi	r30, 0x2A	; 42
     3b0:	f0 e0       	ldi	r31, 0x00	; 0
     3b2:	80 81       	ld	r24, Z
     3b4:	28 2f       	mov	r18, r24
     3b6:	80 91 85 00 	lds	r24, 0x0085
     3ba:	88 2f       	mov	r24, r24
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	96 95       	lsr	r25
     3c0:	98 2f       	mov	r25, r24
     3c2:	88 27       	eor	r24, r24
     3c4:	97 95       	ror	r25
     3c6:	87 95       	ror	r24
     3c8:	82 2b       	or	r24, r18
     3ca:	8c 93       	st	X, r24

	SET_BIT(UCSRC,UCSRC_EN);
     3cc:	a0 e4       	ldi	r26, 0x40	; 64
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	e0 e4       	ldi	r30, 0x40	; 64
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	80 68       	ori	r24, 0x80	; 128
     3d8:	8c 93       	st	X, r24

	UCSRC|=UART_init.UART_ParityType<<PARITY;
     3da:	a0 e4       	ldi	r26, 0x40	; 64
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	e0 e4       	ldi	r30, 0x40	; 64
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	28 2f       	mov	r18, r24
     3e6:	80 91 83 00 	lds	r24, 0x0083
     3ea:	88 2f       	mov	r24, r24
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	82 95       	swap	r24
     3f0:	92 95       	swap	r25
     3f2:	90 7f       	andi	r25, 0xF0	; 240
     3f4:	98 27       	eor	r25, r24
     3f6:	80 7f       	andi	r24, 0xF0	; 240
     3f8:	98 27       	eor	r25, r24
     3fa:	82 2b       	or	r24, r18
     3fc:	8c 93       	st	X, r24

	UCSRC|=UART_init.UART_StopBits_Number<<STOPBIT;
     3fe:	a0 e4       	ldi	r26, 0x40	; 64
     400:	b0 e0       	ldi	r27, 0x00	; 0
     402:	e0 e4       	ldi	r30, 0x40	; 64
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	28 2f       	mov	r18, r24
     40a:	80 91 82 00 	lds	r24, 0x0082
     40e:	88 2f       	mov	r24, r24
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	88 0f       	add	r24, r24
     418:	99 1f       	adc	r25, r25
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	82 2b       	or	r24, r18
     420:	8c 93       	st	X, r24

	return ERROR;
     422:	89 81       	ldd	r24, Y+1	; 0x01
}
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	0f 90       	pop	r0
     42a:	cf 91       	pop	r28
     42c:	df 91       	pop	r29
     42e:	08 95       	ret

00000430 <UART_SendData>:



u8 UART_SendData(u8 Data)
{
     430:	df 93       	push	r29
     432:	cf 93       	push	r28
     434:	00 d0       	rcall	.+0      	; 0x436 <UART_SendData+0x6>
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Error_Status=ERROR_OK;
     43c:	19 82       	std	Y+1, r1	; 0x01

	UDR_T = Data;
     43e:	ec e2       	ldi	r30, 0x2C	; 44
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	8a 81       	ldd	r24, Y+2	; 0x02
     444:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,6)==0);
     446:	eb e2       	ldi	r30, 0x2B	; 43
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	88 2f       	mov	r24, r24
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	80 74       	andi	r24, 0x40	; 64
     452:	90 70       	andi	r25, 0x00	; 0
     454:	08 2e       	mov	r0, r24
     456:	89 2f       	mov	r24, r25
     458:	00 0c       	add	r0, r0
     45a:	88 1f       	adc	r24, r24
     45c:	99 0b       	sbc	r25, r25
     45e:	00 0c       	add	r0, r0
     460:	88 1f       	adc	r24, r24
     462:	99 1f       	adc	r25, r25
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	79 f3       	breq	.-34     	; 0x446 <UART_SendData+0x16>
	return Error_Status;
     468:	89 81       	ldd	r24, Y+1	; 0x01
}
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	cf 91       	pop	r28
     470:	df 91       	pop	r29
     472:	08 95       	ret

00000474 <UART_ReceiveData>:


u8 UART_ReceiveData(u8 *Data)
{
     474:	df 93       	push	r29
     476:	cf 93       	push	r28
     478:	00 d0       	rcall	.+0      	; 0x47a <UART_ReceiveData+0x6>
     47a:	0f 92       	push	r0
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	9b 83       	std	Y+3, r25	; 0x03
     482:	8a 83       	std	Y+2, r24	; 0x02
	u8 Error_Status=ERROR_OK;
     484:	19 82       	std	Y+1, r1	; 0x01

	while(GET_BIT(UCSRA,7)==0);
     486:	eb e2       	ldi	r30, 0x2B	; 43
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	88 1f       	adc	r24, r24
     48e:	88 27       	eor	r24, r24
     490:	88 1f       	adc	r24, r24
     492:	88 2f       	mov	r24, r24
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	90 70       	andi	r25, 0x00	; 0
     498:	00 97       	sbiw	r24, 0x00	; 0
     49a:	a9 f3       	breq	.-22     	; 0x486 <UART_ReceiveData+0x12>
	*Data=UDR_R;
     49c:	ec e2       	ldi	r30, 0x2C	; 44
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	ea 81       	ldd	r30, Y+2	; 0x02
     4a4:	fb 81       	ldd	r31, Y+3	; 0x03
     4a6:	80 83       	st	Z, r24
	return Error_Status;
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
}
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	cf 91       	pop	r28
     4b2:	df 91       	pop	r29
     4b4:	08 95       	ret

000004b6 <Timer0_voidInit>:


static void (*TIMER0_pvCallBack)(void)=NULL;

static void Timer0_voidInit(void)
{
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
	TCCR0|=PRESCALER;
     4be:	a3 e5       	ldi	r26, 0x53	; 83
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	e3 e5       	ldi	r30, 0x53	; 83
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	80 81       	ld	r24, Z
     4c8:	82 60       	ori	r24, 0x02	; 2
     4ca:	8c 93       	st	X, r24
	TIMSK|=INT_OVERFLOW;
     4cc:	a9 e5       	ldi	r26, 0x59	; 89
     4ce:	b0 e0       	ldi	r27, 0x00	; 0
     4d0:	e9 e5       	ldi	r30, 0x59	; 89
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	81 60       	ori	r24, 0x01	; 1
     4d8:	8c 93       	st	X, r24
	SREG|=1<<GLOBAL_INT;
     4da:	af e5       	ldi	r26, 0x5F	; 95
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	ef e5       	ldi	r30, 0x5F	; 95
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	80 68       	ori	r24, 0x80	; 128
     4e6:	8c 93       	st	X, r24
}
     4e8:	cf 91       	pop	r28
     4ea:	df 91       	pop	r29
     4ec:	08 95       	ret

000004ee <Timer0_SetTimeus>:

static ErrorStatus Timer0_SetTimeus(u8 Time)
{
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	0f 92       	push	r0
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	89 83       	std	Y+1, r24	; 0x01

	TCNT0=255-Time;
     4fa:	e2 e5       	ldi	r30, 0x52	; 82
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	80 95       	com	r24
     502:	80 83       	st	Z, r24
	return ERROR_OK;
     504:	80 e0       	ldi	r24, 0x00	; 0

}
     506:	0f 90       	pop	r0
     508:	cf 91       	pop	r28
     50a:	df 91       	pop	r29
     50c:	08 95       	ret

0000050e <Timer0_voidSetCallBack>:


static ErrorStatus Timer0_voidSetCallBack(void(*Copy_pvCallBackPtr)(void))
{
     50e:	df 93       	push	r29
     510:	cf 93       	push	r28
     512:	00 d0       	rcall	.+0      	; 0x514 <Timer0_voidSetCallBack+0x6>
     514:	0f 92       	push	r0
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	9a 83       	std	Y+2, r25	; 0x02
     51c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackPtr!=NULL)
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	00 97       	sbiw	r24, 0x00	; 0
     524:	41 f0       	breq	.+16     	; 0x536 <Timer0_voidSetCallBack+0x28>
		TIMER0_pvCallBack=Copy_pvCallBackPtr;
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	9a 81       	ldd	r25, Y+2	; 0x02
     52a:	90 93 89 00 	sts	0x0089, r25
     52e:	80 93 88 00 	sts	0x0088, r24
	else
		return ERROR_NOK;

	return ERROR_OK;
     532:	1b 82       	std	Y+3, r1	; 0x03
     534:	02 c0       	rjmp	.+4      	; 0x53a <Timer0_voidSetCallBack+0x2c>
static ErrorStatus Timer0_voidSetCallBack(void(*Copy_pvCallBackPtr)(void))
{
	if(Copy_pvCallBackPtr!=NULL)
		TIMER0_pvCallBack=Copy_pvCallBackPtr;
	else
		return ERROR_NOK;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	8b 83       	std	Y+3, r24	; 0x03
     53a:	8b 81       	ldd	r24, Y+3	; 0x03

	return ERROR_OK;
}
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	cf 91       	pop	r28
     544:	df 91       	pop	r29
     546:	08 95       	ret

00000548 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     548:	1f 92       	push	r1
     54a:	0f 92       	push	r0
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	0f 92       	push	r0
     550:	11 24       	eor	r1, r1
     552:	2f 93       	push	r18
     554:	3f 93       	push	r19
     556:	4f 93       	push	r20
     558:	5f 93       	push	r21
     55a:	6f 93       	push	r22
     55c:	7f 93       	push	r23
     55e:	8f 93       	push	r24
     560:	9f 93       	push	r25
     562:	af 93       	push	r26
     564:	bf 93       	push	r27
     566:	ef 93       	push	r30
     568:	ff 93       	push	r31
     56a:	df 93       	push	r29
     56c:	cf 93       	push	r28
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBack!=NULL)
     572:	80 91 88 00 	lds	r24, 0x0088
     576:	90 91 89 00 	lds	r25, 0x0089
     57a:	00 97       	sbiw	r24, 0x00	; 0
     57c:	29 f0       	breq	.+10     	; 0x588 <__vector_11+0x40>
	{
		TIMER0_pvCallBack();
     57e:	e0 91 88 00 	lds	r30, 0x0088
     582:	f0 91 89 00 	lds	r31, 0x0089
     586:	09 95       	icall
	}
}
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	ff 91       	pop	r31
     58e:	ef 91       	pop	r30
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	7f 91       	pop	r23
     59a:	6f 91       	pop	r22
     59c:	5f 91       	pop	r21
     59e:	4f 91       	pop	r20
     5a0:	3f 91       	pop	r19
     5a2:	2f 91       	pop	r18
     5a4:	0f 90       	pop	r0
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	0f 90       	pop	r0
     5aa:	1f 90       	pop	r1
     5ac:	18 95       	reti

000005ae <Scheduler_StartOS>:


void Scheduler_StartOS(void)
{
     5ae:	df 93       	push	r29
     5b0:	cf 93       	push	r28
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62

	Timer0_voidSetCallBack(&Timer_CallBack);
     5b6:	87 ee       	ldi	r24, 0xE7	; 231
     5b8:	93 e0       	ldi	r25, 0x03	; 3
     5ba:	0e 94 87 02 	call	0x50e	; 0x50e <Timer0_voidSetCallBack>

	Timer0_voidInit();
     5be:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <Timer0_voidInit>

	Timer0_SetTimeus(250);
     5c2:	8a ef       	ldi	r24, 0xFA	; 250
     5c4:	0e 94 77 02 	call	0x4ee	; 0x4ee <Timer0_SetTimeus>

}
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	08 95       	ret

000005ce <Scheduler_SuspendTask>:


void Scheduler_SuspendTask(u8 TaskID)
{
     5ce:	df 93       	push	r29
     5d0:	cf 93       	push	r28
     5d2:	0f 92       	push	r0
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[TaskID].State=SUSPENDED;
     5da:	89 81       	ldd	r24, Y+1	; 0x01
     5dc:	48 2f       	mov	r20, r24
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	ca 01       	movw	r24, r20
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	9c 01       	movw	r18, r24
     5e8:	22 0f       	add	r18, r18
     5ea:	33 1f       	adc	r19, r19
     5ec:	22 0f       	add	r18, r18
     5ee:	33 1f       	adc	r19, r19
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	84 0f       	add	r24, r20
     5f6:	95 1f       	adc	r25, r21
     5f8:	fc 01       	movw	r30, r24
     5fa:	e5 59       	subi	r30, 0x95	; 149
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	80 83       	st	Z, r24
}
     602:	0f 90       	pop	r0
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	08 95       	ret

0000060a <Scheduler_ResumeTask>:

void Scheduler_ResumeTask(u8 TaskID)
{
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	0f 92       	push	r0
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[TaskID].State=RUNNING;
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	48 2f       	mov	r20, r24
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	ca 01       	movw	r24, r20
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	9c 01       	movw	r18, r24
     624:	22 0f       	add	r18, r18
     626:	33 1f       	adc	r19, r19
     628:	22 0f       	add	r18, r18
     62a:	33 1f       	adc	r19, r19
     62c:	82 0f       	add	r24, r18
     62e:	93 1f       	adc	r25, r19
     630:	84 0f       	add	r24, r20
     632:	95 1f       	adc	r25, r21
     634:	fc 01       	movw	r30, r24
     636:	e5 59       	subi	r30, 0x95	; 149
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 83       	st	Z, r24
}
     63e:	0f 90       	pop	r0
     640:	cf 91       	pop	r28
     642:	df 91       	pop	r29
     644:	08 95       	ret

00000646 <Scheduler>:

static void Scheduler(void)
{
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	df 93       	push	r29
     650:	cf 93       	push	r28
     652:	0f 92       	push	r0
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
	u8 i;
	for(i=0;i<TASKNUMBERS;i++)
     658:	19 82       	std	Y+1, r1	; 0x01
     65a:	ad c0       	rjmp	.+346    	; 0x7b6 <Scheduler+0x170>
	{

		if(SystemTasks[i].State==RUNNING)
     65c:	89 81       	ldd	r24, Y+1	; 0x01
     65e:	48 2f       	mov	r20, r24
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	ca 01       	movw	r24, r20
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	9c 01       	movw	r18, r24
     66a:	22 0f       	add	r18, r18
     66c:	33 1f       	adc	r19, r19
     66e:	22 0f       	add	r18, r18
     670:	33 1f       	adc	r19, r19
     672:	82 0f       	add	r24, r18
     674:	93 1f       	adc	r25, r19
     676:	84 0f       	add	r24, r20
     678:	95 1f       	adc	r25, r21
     67a:	fc 01       	movw	r30, r24
     67c:	e5 59       	subi	r30, 0x95	; 149
     67e:	ff 4f       	sbci	r31, 0xFF	; 255
     680:	80 81       	ld	r24, Z
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	09 f0       	breq	.+2      	; 0x688 <Scheduler+0x42>
     686:	94 c0       	rjmp	.+296    	; 0x7b0 <Scheduler+0x16a>
		{
			if(SystemTasks[i].FirstDelay==0)
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	48 2f       	mov	r20, r24
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	ca 01       	movw	r24, r20
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	9c 01       	movw	r18, r24
     696:	22 0f       	add	r18, r18
     698:	33 1f       	adc	r19, r19
     69a:	22 0f       	add	r18, r18
     69c:	33 1f       	adc	r19, r19
     69e:	82 0f       	add	r24, r18
     6a0:	93 1f       	adc	r25, r19
     6a2:	84 0f       	add	r24, r20
     6a4:	95 1f       	adc	r25, r21
     6a6:	fc 01       	movw	r30, r24
     6a8:	e9 59       	subi	r30, 0x99	; 153
     6aa:	ff 4f       	sbci	r31, 0xFF	; 255
     6ac:	80 81       	ld	r24, Z
     6ae:	91 81       	ldd	r25, Z+1	; 0x01
     6b0:	a2 81       	ldd	r26, Z+2	; 0x02
     6b2:	b3 81       	ldd	r27, Z+3	; 0x03
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	a1 05       	cpc	r26, r1
     6b8:	b1 05       	cpc	r27, r1
     6ba:	09 f0       	breq	.+2      	; 0x6be <Scheduler+0x78>
     6bc:	49 c0       	rjmp	.+146    	; 0x750 <Scheduler+0x10a>
			{
				SystemTasks[i].FirstDelay=SystemTasks[i].Periodicity-1;
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	08 2f       	mov	r16, r24
     6c2:	10 e0       	ldi	r17, 0x00	; 0
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	48 2f       	mov	r20, r24
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	ca 01       	movw	r24, r20
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	9c 01       	movw	r18, r24
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	22 0f       	add	r18, r18
     6d8:	33 1f       	adc	r19, r19
     6da:	82 0f       	add	r24, r18
     6dc:	93 1f       	adc	r25, r19
     6de:	84 0f       	add	r24, r20
     6e0:	95 1f       	adc	r25, r21
     6e2:	fc 01       	movw	r30, r24
     6e4:	ed 59       	subi	r30, 0x9D	; 157
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	a2 81       	ldd	r26, Z+2	; 0x02
     6ee:	b3 81       	ldd	r27, Z+3	; 0x03
     6f0:	ac 01       	movw	r20, r24
     6f2:	bd 01       	movw	r22, r26
     6f4:	41 50       	subi	r20, 0x01	; 1
     6f6:	50 40       	sbci	r21, 0x00	; 0
     6f8:	60 40       	sbci	r22, 0x00	; 0
     6fa:	70 40       	sbci	r23, 0x00	; 0
     6fc:	c8 01       	movw	r24, r16
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	9c 01       	movw	r18, r24
     704:	22 0f       	add	r18, r18
     706:	33 1f       	adc	r19, r19
     708:	22 0f       	add	r18, r18
     70a:	33 1f       	adc	r19, r19
     70c:	82 0f       	add	r24, r18
     70e:	93 1f       	adc	r25, r19
     710:	80 0f       	add	r24, r16
     712:	91 1f       	adc	r25, r17
     714:	fc 01       	movw	r30, r24
     716:	e9 59       	subi	r30, 0x99	; 153
     718:	ff 4f       	sbci	r31, 0xFF	; 255
     71a:	40 83       	st	Z, r20
     71c:	51 83       	std	Z+1, r21	; 0x01
     71e:	62 83       	std	Z+2, r22	; 0x02
     720:	73 83       	std	Z+3, r23	; 0x03
				SystemTasks[i].Taskhandler();
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	48 2f       	mov	r20, r24
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	ca 01       	movw	r24, r20
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	9c 01       	movw	r18, r24
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	22 0f       	add	r18, r18
     736:	33 1f       	adc	r19, r19
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	84 0f       	add	r24, r20
     73e:	95 1f       	adc	r25, r21
     740:	fc 01       	movw	r30, r24
     742:	ef 59       	subi	r30, 0x9F	; 159
     744:	ff 4f       	sbci	r31, 0xFF	; 255
     746:	01 90       	ld	r0, Z+
     748:	f0 81       	ld	r31, Z
     74a:	e0 2d       	mov	r30, r0
     74c:	09 95       	icall
     74e:	30 c0       	rjmp	.+96     	; 0x7b0 <Scheduler+0x16a>
			}
			else
			{
				SystemTasks[i].FirstDelay--;
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	48 2f       	mov	r20, r24
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	ca 01       	movw	r24, r20
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	9c 01       	movw	r18, r24
     75e:	22 0f       	add	r18, r18
     760:	33 1f       	adc	r19, r19
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	82 0f       	add	r24, r18
     768:	93 1f       	adc	r25, r19
     76a:	84 0f       	add	r24, r20
     76c:	95 1f       	adc	r25, r21
     76e:	fc 01       	movw	r30, r24
     770:	e9 59       	subi	r30, 0x99	; 153
     772:	ff 4f       	sbci	r31, 0xFF	; 255
     774:	80 81       	ld	r24, Z
     776:	91 81       	ldd	r25, Z+1	; 0x01
     778:	a2 81       	ldd	r26, Z+2	; 0x02
     77a:	b3 81       	ldd	r27, Z+3	; 0x03
     77c:	7c 01       	movw	r14, r24
     77e:	8d 01       	movw	r16, r26
     780:	08 94       	sec
     782:	e1 08       	sbc	r14, r1
     784:	f1 08       	sbc	r15, r1
     786:	01 09       	sbc	r16, r1
     788:	11 09       	sbc	r17, r1
     78a:	ca 01       	movw	r24, r20
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	9c 01       	movw	r18, r24
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	22 0f       	add	r18, r18
     798:	33 1f       	adc	r19, r19
     79a:	82 0f       	add	r24, r18
     79c:	93 1f       	adc	r25, r19
     79e:	84 0f       	add	r24, r20
     7a0:	95 1f       	adc	r25, r21
     7a2:	fc 01       	movw	r30, r24
     7a4:	e9 59       	subi	r30, 0x99	; 153
     7a6:	ff 4f       	sbci	r31, 0xFF	; 255
     7a8:	e0 82       	st	Z, r14
     7aa:	f1 82       	std	Z+1, r15	; 0x01
     7ac:	02 83       	std	Z+2, r16	; 0x02
     7ae:	13 83       	std	Z+3, r17	; 0x03
}

static void Scheduler(void)
{
	u8 i;
	for(i=0;i<TASKNUMBERS;i++)
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	8f 5f       	subi	r24, 0xFF	; 255
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	08 f4       	brcc	.+2      	; 0x7be <Scheduler+0x178>
     7bc:	4f cf       	rjmp	.-354    	; 0x65c <Scheduler+0x16>
			/*Task Suspended*/
		}

	}

}
     7be:	0f 90       	pop	r0
     7c0:	cf 91       	pop	r28
     7c2:	df 91       	pop	r29
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	08 95       	ret

000007ce <Timer_CallBack>:




void Timer_CallBack(void)
{
     7ce:	df 93       	push	r29
     7d0:	cf 93       	push	r28
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
	static u8 counter;
	counter++;
     7d6:	80 91 8a 00 	lds	r24, 0x008A
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	80 93 8a 00 	sts	0x008A, r24

	if(4==counter)
     7e0:	80 91 8a 00 	lds	r24, 0x008A
     7e4:	84 30       	cpi	r24, 0x04	; 4
     7e6:	21 f4       	brne	.+8      	; 0x7f0 <Timer_CallBack+0x22>
	{
		counter=0;
     7e8:	10 92 8a 00 	sts	0x008A, r1
		Scheduler();
     7ec:	0e 94 23 03 	call	0x646	; 0x646 <Scheduler>
	}
}
     7f0:	cf 91       	pop	r28
     7f2:	df 91       	pop	r29
     7f4:	08 95       	ret

000007f6 <DIO_SetPinDirection>:
#define PORTD *((u8*)0x32)
#define DDRD  *((u8*)0x31)
#define PIND  *((u8*)0x30)

ErrorStatus DIO_SetPinDirection(u8 Port,u8 Pin, u8 Direction)
{
     7f6:	df 93       	push	r29
     7f8:	cf 93       	push	r28
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <DIO_SetPinDirection+0x6>
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <DIO_SetPinDirection+0x8>
     7fe:	00 d0       	rcall	.+0      	; 0x800 <DIO_SetPinDirection+0xa>
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	89 83       	std	Y+1, r24	; 0x01
     806:	6a 83       	std	Y+2, r22	; 0x02
     808:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	3e 83       	std	Y+6, r19	; 0x06
     812:	2d 83       	std	Y+5, r18	; 0x05
     814:	8d 81       	ldd	r24, Y+5	; 0x05
     816:	9e 81       	ldd	r25, Y+6	; 0x06
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	91 05       	cpc	r25, r1
     81c:	09 f4       	brne	.+2      	; 0x820 <DIO_SetPinDirection+0x2a>
     81e:	49 c0       	rjmp	.+146    	; 0x8b2 <DIO_SetPinDirection+0xbc>
     820:	2d 81       	ldd	r18, Y+5	; 0x05
     822:	3e 81       	ldd	r19, Y+6	; 0x06
     824:	22 30       	cpi	r18, 0x02	; 2
     826:	31 05       	cpc	r19, r1
     828:	2c f4       	brge	.+10     	; 0x834 <DIO_SetPinDirection+0x3e>
     82a:	8d 81       	ldd	r24, Y+5	; 0x05
     82c:	9e 81       	ldd	r25, Y+6	; 0x06
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	71 f0       	breq	.+28     	; 0x84e <DIO_SetPinDirection+0x58>
     832:	d5 c0       	rjmp	.+426    	; 0x9de <DIO_SetPinDirection+0x1e8>
     834:	2d 81       	ldd	r18, Y+5	; 0x05
     836:	3e 81       	ldd	r19, Y+6	; 0x06
     838:	22 30       	cpi	r18, 0x02	; 2
     83a:	31 05       	cpc	r19, r1
     83c:	09 f4       	brne	.+2      	; 0x840 <DIO_SetPinDirection+0x4a>
     83e:	6b c0       	rjmp	.+214    	; 0x916 <DIO_SetPinDirection+0x120>
     840:	8d 81       	ldd	r24, Y+5	; 0x05
     842:	9e 81       	ldd	r25, Y+6	; 0x06
     844:	83 30       	cpi	r24, 0x03	; 3
     846:	91 05       	cpc	r25, r1
     848:	09 f4       	brne	.+2      	; 0x84c <DIO_SetPinDirection+0x56>
     84a:	97 c0       	rjmp	.+302    	; 0x97a <DIO_SetPinDirection+0x184>
     84c:	c8 c0       	rjmp	.+400    	; 0x9de <DIO_SetPinDirection+0x1e8>
	{
	case PORT_A:
		if(Direction==INPUT)
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	88 23       	and	r24, r24
     852:	a9 f4       	brne	.+42     	; 0x87e <DIO_SetPinDirection+0x88>
		{
			DDRA &= ~(1<<Pin);
     854:	aa e3       	ldi	r26, 0x3A	; 58
     856:	b0 e0       	ldi	r27, 0x00	; 0
     858:	ea e3       	ldi	r30, 0x3A	; 58
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 81       	ld	r24, Z
     85e:	48 2f       	mov	r20, r24
     860:	8a 81       	ldd	r24, Y+2	; 0x02
     862:	28 2f       	mov	r18, r24
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	02 2e       	mov	r0, r18
     86c:	02 c0       	rjmp	.+4      	; 0x872 <DIO_SetPinDirection+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	0a 94       	dec	r0
     874:	e2 f7       	brpl	.-8      	; 0x86e <DIO_SetPinDirection+0x78>
     876:	80 95       	com	r24
     878:	84 23       	and	r24, r20
     87a:	8c 93       	st	X, r24
     87c:	b3 c0       	rjmp	.+358    	; 0x9e4 <DIO_SetPinDirection+0x1ee>
		}
		else if(Direction==OUTPUT)
     87e:	8b 81       	ldd	r24, Y+3	; 0x03
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	a1 f4       	brne	.+40     	; 0x8ac <DIO_SetPinDirection+0xb6>
		{
			DDRA|= (1<<Pin);
     884:	aa e3       	ldi	r26, 0x3A	; 58
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	ea e3       	ldi	r30, 0x3A	; 58
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	80 81       	ld	r24, Z
     88e:	48 2f       	mov	r20, r24
     890:	8a 81       	ldd	r24, Y+2	; 0x02
     892:	28 2f       	mov	r18, r24
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	02 2e       	mov	r0, r18
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <DIO_SetPinDirection+0xac>
     89e:	88 0f       	add	r24, r24
     8a0:	99 1f       	adc	r25, r25
     8a2:	0a 94       	dec	r0
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <DIO_SetPinDirection+0xa8>
     8a6:	84 2b       	or	r24, r20
     8a8:	8c 93       	st	X, r24
     8aa:	9c c0       	rjmp	.+312    	; 0x9e4 <DIO_SetPinDirection+0x1ee>
		}
		else
		{
			return ERROR_NOK;
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	9c 83       	std	Y+4, r25	; 0x04
     8b0:	9a c0       	rjmp	.+308    	; 0x9e6 <DIO_SetPinDirection+0x1f0>
		}
		break;

	case PORT_B:
		if(Direction==INPUT)
     8b2:	8b 81       	ldd	r24, Y+3	; 0x03
     8b4:	88 23       	and	r24, r24
     8b6:	a9 f4       	brne	.+42     	; 0x8e2 <DIO_SetPinDirection+0xec>
		{
			DDRB &= ~(1<<Pin);
     8b8:	a7 e3       	ldi	r26, 0x37	; 55
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	e7 e3       	ldi	r30, 0x37	; 55
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	48 2f       	mov	r20, r24
     8c4:	8a 81       	ldd	r24, Y+2	; 0x02
     8c6:	28 2f       	mov	r18, r24
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	02 2e       	mov	r0, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <DIO_SetPinDirection+0xe0>
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	0a 94       	dec	r0
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <DIO_SetPinDirection+0xdc>
     8da:	80 95       	com	r24
     8dc:	84 23       	and	r24, r20
     8de:	8c 93       	st	X, r24
     8e0:	81 c0       	rjmp	.+258    	; 0x9e4 <DIO_SetPinDirection+0x1ee>

		}
		else if(Direction==OUTPUT)
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	a1 f4       	brne	.+40     	; 0x910 <DIO_SetPinDirection+0x11a>
		{
			DDRB|= (1<<Pin);
     8e8:	a7 e3       	ldi	r26, 0x37	; 55
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	e7 e3       	ldi	r30, 0x37	; 55
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	80 81       	ld	r24, Z
     8f2:	48 2f       	mov	r20, r24
     8f4:	8a 81       	ldd	r24, Y+2	; 0x02
     8f6:	28 2f       	mov	r18, r24
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	02 2e       	mov	r0, r18
     900:	02 c0       	rjmp	.+4      	; 0x906 <DIO_SetPinDirection+0x110>
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	0a 94       	dec	r0
     908:	e2 f7       	brpl	.-8      	; 0x902 <DIO_SetPinDirection+0x10c>
     90a:	84 2b       	or	r24, r20
     90c:	8c 93       	st	X, r24
     90e:	6a c0       	rjmp	.+212    	; 0x9e4 <DIO_SetPinDirection+0x1ee>
		}
		else
		{
			return ERROR_NOK;
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	2c 83       	std	Y+4, r18	; 0x04
     914:	68 c0       	rjmp	.+208    	; 0x9e6 <DIO_SetPinDirection+0x1f0>
		}
		break;

	case PORT_C:
		if(Direction==INPUT)
     916:	8b 81       	ldd	r24, Y+3	; 0x03
     918:	88 23       	and	r24, r24
     91a:	a9 f4       	brne	.+42     	; 0x946 <DIO_SetPinDirection+0x150>
		{
			DDRC &=  ~(1<<Pin);
     91c:	a4 e3       	ldi	r26, 0x34	; 52
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	e4 e3       	ldi	r30, 0x34	; 52
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	80 81       	ld	r24, Z
     926:	48 2f       	mov	r20, r24
     928:	8a 81       	ldd	r24, Y+2	; 0x02
     92a:	28 2f       	mov	r18, r24
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	02 2e       	mov	r0, r18
     934:	02 c0       	rjmp	.+4      	; 0x93a <DIO_SetPinDirection+0x144>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	0a 94       	dec	r0
     93c:	e2 f7       	brpl	.-8      	; 0x936 <DIO_SetPinDirection+0x140>
     93e:	80 95       	com	r24
     940:	84 23       	and	r24, r20
     942:	8c 93       	st	X, r24
     944:	4f c0       	rjmp	.+158    	; 0x9e4 <DIO_SetPinDirection+0x1ee>
		}
		else if(Direction==OUTPUT)
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	a1 f4       	brne	.+40     	; 0x974 <DIO_SetPinDirection+0x17e>
		{
			DDRC|= (1<<Pin);
     94c:	a4 e3       	ldi	r26, 0x34	; 52
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	e4 e3       	ldi	r30, 0x34	; 52
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	48 2f       	mov	r20, r24
     958:	8a 81       	ldd	r24, Y+2	; 0x02
     95a:	28 2f       	mov	r18, r24
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	02 2e       	mov	r0, r18
     964:	02 c0       	rjmp	.+4      	; 0x96a <DIO_SetPinDirection+0x174>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	0a 94       	dec	r0
     96c:	e2 f7       	brpl	.-8      	; 0x966 <DIO_SetPinDirection+0x170>
     96e:	84 2b       	or	r24, r20
     970:	8c 93       	st	X, r24
     972:	38 c0       	rjmp	.+112    	; 0x9e4 <DIO_SetPinDirection+0x1ee>
		}
		else
		{
			return ERROR_NOK;
     974:	31 e0       	ldi	r19, 0x01	; 1
     976:	3c 83       	std	Y+4, r19	; 0x04
     978:	36 c0       	rjmp	.+108    	; 0x9e6 <DIO_SetPinDirection+0x1f0>
		}
		break;

	case PORT_D:
		if(Direction==INPUT)
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	88 23       	and	r24, r24
     97e:	a9 f4       	brne	.+42     	; 0x9aa <DIO_SetPinDirection+0x1b4>
		{
			DDRD &= ~(1<<Pin);
     980:	a1 e3       	ldi	r26, 0x31	; 49
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	e1 e3       	ldi	r30, 0x31	; 49
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	80 81       	ld	r24, Z
     98a:	48 2f       	mov	r20, r24
     98c:	8a 81       	ldd	r24, Y+2	; 0x02
     98e:	28 2f       	mov	r18, r24
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	02 2e       	mov	r0, r18
     998:	02 c0       	rjmp	.+4      	; 0x99e <DIO_SetPinDirection+0x1a8>
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	0a 94       	dec	r0
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <DIO_SetPinDirection+0x1a4>
     9a2:	80 95       	com	r24
     9a4:	84 23       	and	r24, r20
     9a6:	8c 93       	st	X, r24
     9a8:	1d c0       	rjmp	.+58     	; 0x9e4 <DIO_SetPinDirection+0x1ee>
		}
		else if(Direction==OUTPUT)
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	a1 f4       	brne	.+40     	; 0x9d8 <DIO_SetPinDirection+0x1e2>
		{
			DDRD|= (1<<Pin);
     9b0:	a1 e3       	ldi	r26, 0x31	; 49
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	e1 e3       	ldi	r30, 0x31	; 49
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	48 2f       	mov	r20, r24
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	28 2f       	mov	r18, r24
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	02 2e       	mov	r0, r18
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <DIO_SetPinDirection+0x1d8>
     9ca:	88 0f       	add	r24, r24
     9cc:	99 1f       	adc	r25, r25
     9ce:	0a 94       	dec	r0
     9d0:	e2 f7       	brpl	.-8      	; 0x9ca <DIO_SetPinDirection+0x1d4>
     9d2:	84 2b       	or	r24, r20
     9d4:	8c 93       	st	X, r24
     9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <DIO_SetPinDirection+0x1ee>
		}
		else
		{
			return ERROR_NOK;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	8c 83       	std	Y+4, r24	; 0x04
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <DIO_SetPinDirection+0x1f0>
		}
		break;

	default: return ERROR_NOK;
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	9c 83       	std	Y+4, r25	; 0x04
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <DIO_SetPinDirection+0x1f0>
	}
	return ERROR_OK;
     9e4:	1c 82       	std	Y+4, r1	; 0x04
     9e6:	8c 81       	ldd	r24, Y+4	; 0x04
}
     9e8:	26 96       	adiw	r28, 0x06	; 6
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	cf 91       	pop	r28
     9f6:	df 91       	pop	r29
     9f8:	08 95       	ret

000009fa <DIO_SetPinValue>:


ErrorStatus DIO_SetPinValue(u8 Port,u8 Pin, u8 Value)
{
     9fa:	df 93       	push	r29
     9fc:	cf 93       	push	r28
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <DIO_SetPinValue+0x6>
     a00:	00 d0       	rcall	.+0      	; 0xa02 <DIO_SetPinValue+0x8>
     a02:	00 d0       	rcall	.+0      	; 0xa04 <DIO_SetPinValue+0xa>
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	6a 83       	std	Y+2, r22	; 0x02
     a0c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	28 2f       	mov	r18, r24
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	3e 83       	std	Y+6, r19	; 0x06
     a16:	2d 83       	std	Y+5, r18	; 0x05
     a18:	8d 81       	ldd	r24, Y+5	; 0x05
     a1a:	9e 81       	ldd	r25, Y+6	; 0x06
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	91 05       	cpc	r25, r1
     a20:	09 f4       	brne	.+2      	; 0xa24 <DIO_SetPinValue+0x2a>
     a22:	49 c0       	rjmp	.+146    	; 0xab6 <DIO_SetPinValue+0xbc>
     a24:	2d 81       	ldd	r18, Y+5	; 0x05
     a26:	3e 81       	ldd	r19, Y+6	; 0x06
     a28:	22 30       	cpi	r18, 0x02	; 2
     a2a:	31 05       	cpc	r19, r1
     a2c:	2c f4       	brge	.+10     	; 0xa38 <DIO_SetPinValue+0x3e>
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	71 f0       	breq	.+28     	; 0xa52 <DIO_SetPinValue+0x58>
     a36:	d5 c0       	rjmp	.+426    	; 0xbe2 <DIO_SetPinValue+0x1e8>
     a38:	2d 81       	ldd	r18, Y+5	; 0x05
     a3a:	3e 81       	ldd	r19, Y+6	; 0x06
     a3c:	22 30       	cpi	r18, 0x02	; 2
     a3e:	31 05       	cpc	r19, r1
     a40:	09 f4       	brne	.+2      	; 0xa44 <DIO_SetPinValue+0x4a>
     a42:	6b c0       	rjmp	.+214    	; 0xb1a <DIO_SetPinValue+0x120>
     a44:	8d 81       	ldd	r24, Y+5	; 0x05
     a46:	9e 81       	ldd	r25, Y+6	; 0x06
     a48:	83 30       	cpi	r24, 0x03	; 3
     a4a:	91 05       	cpc	r25, r1
     a4c:	09 f4       	brne	.+2      	; 0xa50 <DIO_SetPinValue+0x56>
     a4e:	97 c0       	rjmp	.+302    	; 0xb7e <DIO_SetPinValue+0x184>
     a50:	c8 c0       	rjmp	.+400    	; 0xbe2 <DIO_SetPinValue+0x1e8>
	{
	case PORT_A:
		if(Value==LOW)
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	88 23       	and	r24, r24
     a56:	a9 f4       	brne	.+42     	; 0xa82 <DIO_SetPinValue+0x88>
		{
			PORTA &= ~(1<<Pin);
     a58:	ab e3       	ldi	r26, 0x3B	; 59
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	eb e3       	ldi	r30, 0x3B	; 59
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	80 81       	ld	r24, Z
     a62:	48 2f       	mov	r20, r24
     a64:	8a 81       	ldd	r24, Y+2	; 0x02
     a66:	28 2f       	mov	r18, r24
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	02 2e       	mov	r0, r18
     a70:	02 c0       	rjmp	.+4      	; 0xa76 <DIO_SetPinValue+0x7c>
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	0a 94       	dec	r0
     a78:	e2 f7       	brpl	.-8      	; 0xa72 <DIO_SetPinValue+0x78>
     a7a:	80 95       	com	r24
     a7c:	84 23       	and	r24, r20
     a7e:	8c 93       	st	X, r24
     a80:	b3 c0       	rjmp	.+358    	; 0xbe8 <DIO_SetPinValue+0x1ee>

		}
		else if(Value==HIGH)
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	a1 f4       	brne	.+40     	; 0xab0 <DIO_SetPinValue+0xb6>
		{
			PORTA|= (1<<Pin);
     a88:	ab e3       	ldi	r26, 0x3B	; 59
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	eb e3       	ldi	r30, 0x3B	; 59
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	48 2f       	mov	r20, r24
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	28 2f       	mov	r18, r24
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	02 2e       	mov	r0, r18
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <DIO_SetPinValue+0xac>
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	0a 94       	dec	r0
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <DIO_SetPinValue+0xa8>
     aaa:	84 2b       	or	r24, r20
     aac:	8c 93       	st	X, r24
     aae:	9c c0       	rjmp	.+312    	; 0xbe8 <DIO_SetPinValue+0x1ee>
		}
		else
		{
			return ERROR_NOK;
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	9c 83       	std	Y+4, r25	; 0x04
     ab4:	9a c0       	rjmp	.+308    	; 0xbea <DIO_SetPinValue+0x1f0>
		}
		break;

	case PORT_B:
		if(Value==LOW)
     ab6:	8b 81       	ldd	r24, Y+3	; 0x03
     ab8:	88 23       	and	r24, r24
     aba:	a9 f4       	brne	.+42     	; 0xae6 <DIO_SetPinValue+0xec>
		{
			PORTB &= ~(1<<Pin);
     abc:	a8 e3       	ldi	r26, 0x38	; 56
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e8 e3       	ldi	r30, 0x38	; 56
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	48 2f       	mov	r20, r24
     ac8:	8a 81       	ldd	r24, Y+2	; 0x02
     aca:	28 2f       	mov	r18, r24
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 2e       	mov	r0, r18
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_SetPinValue+0xe0>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	0a 94       	dec	r0
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <DIO_SetPinValue+0xdc>
     ade:	80 95       	com	r24
     ae0:	84 23       	and	r24, r20
     ae2:	8c 93       	st	X, r24
     ae4:	81 c0       	rjmp	.+258    	; 0xbe8 <DIO_SetPinValue+0x1ee>

		}
		else if(Value==HIGH)
     ae6:	8b 81       	ldd	r24, Y+3	; 0x03
     ae8:	81 30       	cpi	r24, 0x01	; 1
     aea:	a1 f4       	brne	.+40     	; 0xb14 <DIO_SetPinValue+0x11a>
		{
			PORTB|= (1<<Pin);
     aec:	a8 e3       	ldi	r26, 0x38	; 56
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	e8 e3       	ldi	r30, 0x38	; 56
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	48 2f       	mov	r20, r24
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 2e       	mov	r0, r18
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <DIO_SetPinValue+0x110>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	0a 94       	dec	r0
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <DIO_SetPinValue+0x10c>
     b0e:	84 2b       	or	r24, r20
     b10:	8c 93       	st	X, r24
     b12:	6a c0       	rjmp	.+212    	; 0xbe8 <DIO_SetPinValue+0x1ee>
		}
		else
		{
			return ERROR_NOK;
     b14:	21 e0       	ldi	r18, 0x01	; 1
     b16:	2c 83       	std	Y+4, r18	; 0x04
     b18:	68 c0       	rjmp	.+208    	; 0xbea <DIO_SetPinValue+0x1f0>
		}
		break;

	case PORT_C:
		if(Value==LOW)
     b1a:	8b 81       	ldd	r24, Y+3	; 0x03
     b1c:	88 23       	and	r24, r24
     b1e:	a9 f4       	brne	.+42     	; 0xb4a <DIO_SetPinValue+0x150>
		{
			PORTC &= ~(1<<Pin);
     b20:	a5 e3       	ldi	r26, 0x35	; 53
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	e5 e3       	ldi	r30, 0x35	; 53
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	48 2f       	mov	r20, r24
     b2c:	8a 81       	ldd	r24, Y+2	; 0x02
     b2e:	28 2f       	mov	r18, r24
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	02 2e       	mov	r0, r18
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <DIO_SetPinValue+0x144>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	0a 94       	dec	r0
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <DIO_SetPinValue+0x140>
     b42:	80 95       	com	r24
     b44:	84 23       	and	r24, r20
     b46:	8c 93       	st	X, r24
     b48:	4f c0       	rjmp	.+158    	; 0xbe8 <DIO_SetPinValue+0x1ee>

		}
		else if(Value==HIGH)
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	a1 f4       	brne	.+40     	; 0xb78 <DIO_SetPinValue+0x17e>
		{
			PORTC|= (1<<Pin);
     b50:	a5 e3       	ldi	r26, 0x35	; 53
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e5 e3       	ldi	r30, 0x35	; 53
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	48 2f       	mov	r20, r24
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 2e       	mov	r0, r18
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <DIO_SetPinValue+0x174>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <DIO_SetPinValue+0x170>
     b72:	84 2b       	or	r24, r20
     b74:	8c 93       	st	X, r24
     b76:	38 c0       	rjmp	.+112    	; 0xbe8 <DIO_SetPinValue+0x1ee>
		}
		else
		{
			return ERROR_NOK;
     b78:	31 e0       	ldi	r19, 0x01	; 1
     b7a:	3c 83       	std	Y+4, r19	; 0x04
     b7c:	36 c0       	rjmp	.+108    	; 0xbea <DIO_SetPinValue+0x1f0>
		}
		break;

	case PORT_D:
		if(Value==LOW)
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	88 23       	and	r24, r24
     b82:	a9 f4       	brne	.+42     	; 0xbae <DIO_SetPinValue+0x1b4>
		{
			PORTD &= ~(1<<Pin);
     b84:	a2 e3       	ldi	r26, 0x32	; 50
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e2 e3       	ldi	r30, 0x32	; 50
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	48 2f       	mov	r20, r24
     b90:	8a 81       	ldd	r24, Y+2	; 0x02
     b92:	28 2f       	mov	r18, r24
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 2e       	mov	r0, r18
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <DIO_SetPinValue+0x1a8>
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	0a 94       	dec	r0
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <DIO_SetPinValue+0x1a4>
     ba6:	80 95       	com	r24
     ba8:	84 23       	and	r24, r20
     baa:	8c 93       	st	X, r24
     bac:	1d c0       	rjmp	.+58     	; 0xbe8 <DIO_SetPinValue+0x1ee>

		}
		else if(Value==HIGH)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <DIO_SetPinValue+0x1e2>
		{
			PORTD|= (1<<Pin);
     bb4:	a2 e3       	ldi	r26, 0x32	; 50
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e2 e3       	ldi	r30, 0x32	; 50
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_SetPinValue+0x1d8>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_SetPinValue+0x1d4>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	06 c0       	rjmp	.+12     	; 0xbe8 <DIO_SetPinValue+0x1ee>
		}
		else
		{
			return ERROR_NOK;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	8c 83       	std	Y+4, r24	; 0x04
     be0:	04 c0       	rjmp	.+8      	; 0xbea <DIO_SetPinValue+0x1f0>
		}
		break;

	default: return ERROR_NOK;
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	9c 83       	std	Y+4, r25	; 0x04
     be6:	01 c0       	rjmp	.+2      	; 0xbea <DIO_SetPinValue+0x1f0>
	}
	return ERROR_OK;
     be8:	1c 82       	std	Y+4, r1	; 0x04
     bea:	8c 81       	ldd	r24, Y+4	; 0x04
}
     bec:	26 96       	adiw	r28, 0x06	; 6
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	08 95       	ret

00000bfe <DIO_SetPortDirecton>:

ErrorStatus DIO_SetPortDirecton(u8 Port,u8 Value)
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	00 d0       	rcall	.+0      	; 0xc04 <DIO_SetPortDirecton+0x6>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <DIO_SetPortDirecton+0x8>
     c06:	0f 92       	push	r0
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	89 83       	std	Y+1, r24	; 0x01
     c0e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	3d 83       	std	Y+5, r19	; 0x05
     c18:	2c 83       	std	Y+4, r18	; 0x04
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	9d 81       	ldd	r25, Y+5	; 0x05
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	91 05       	cpc	r25, r1
     c22:	d1 f0       	breq	.+52     	; 0xc58 <DIO_SetPortDirecton+0x5a>
     c24:	2c 81       	ldd	r18, Y+4	; 0x04
     c26:	3d 81       	ldd	r19, Y+5	; 0x05
     c28:	22 30       	cpi	r18, 0x02	; 2
     c2a:	31 05       	cpc	r19, r1
     c2c:	2c f4       	brge	.+10     	; 0xc38 <DIO_SetPortDirecton+0x3a>
     c2e:	8c 81       	ldd	r24, Y+4	; 0x04
     c30:	9d 81       	ldd	r25, Y+5	; 0x05
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	61 f0       	breq	.+24     	; 0xc4e <DIO_SetPortDirecton+0x50>
     c36:	1f c0       	rjmp	.+62     	; 0xc76 <DIO_SetPortDirecton+0x78>
     c38:	2c 81       	ldd	r18, Y+4	; 0x04
     c3a:	3d 81       	ldd	r19, Y+5	; 0x05
     c3c:	22 30       	cpi	r18, 0x02	; 2
     c3e:	31 05       	cpc	r19, r1
     c40:	81 f0       	breq	.+32     	; 0xc62 <DIO_SetPortDirecton+0x64>
     c42:	8c 81       	ldd	r24, Y+4	; 0x04
     c44:	9d 81       	ldd	r25, Y+5	; 0x05
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	91 05       	cpc	r25, r1
     c4a:	81 f0       	breq	.+32     	; 0xc6c <DIO_SetPortDirecton+0x6e>
     c4c:	14 c0       	rjmp	.+40     	; 0xc76 <DIO_SetPortDirecton+0x78>
	{
	case PORT_A:
		DDRA=Value;
     c4e:	ea e3       	ldi	r30, 0x3A	; 58
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	80 83       	st	Z, r24
     c56:	12 c0       	rjmp	.+36     	; 0xc7c <DIO_SetPortDirecton+0x7e>
		break;
	case PORT_B:
		DDRB=Value;
     c58:	e7 e3       	ldi	r30, 0x37	; 55
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	8a 81       	ldd	r24, Y+2	; 0x02
     c5e:	80 83       	st	Z, r24
     c60:	0d c0       	rjmp	.+26     	; 0xc7c <DIO_SetPortDirecton+0x7e>
		break;
	case PORT_C:
		DDRC=Value;
     c62:	e4 e3       	ldi	r30, 0x34	; 52
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	80 83       	st	Z, r24
     c6a:	08 c0       	rjmp	.+16     	; 0xc7c <DIO_SetPortDirecton+0x7e>
		break;
	case PORT_D:
		DDRD=Value;
     c6c:	e1 e3       	ldi	r30, 0x31	; 49
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	80 83       	st	Z, r24
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <DIO_SetPortDirecton+0x7e>
		break;
	default: return ERROR_NOK;
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	9b 83       	std	Y+3, r25	; 0x03
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <DIO_SetPortDirecton+0x80>
	}
	return ERROR_OK;
     c7c:	1b 82       	std	Y+3, r1	; 0x03
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <DIO_SetPortValue>:

ErrorStatus DIO_SetPortValue(u8 Port,u8 Value)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_SetPortValue+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <DIO_SetPortValue+0x8>
     c98:	0f 92       	push	r0
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	3d 83       	std	Y+5, r19	; 0x05
     caa:	2c 83       	std	Y+4, r18	; 0x04
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	91 05       	cpc	r25, r1
     cb4:	d1 f0       	breq	.+52     	; 0xcea <DIO_SetPortValue+0x5a>
     cb6:	2c 81       	ldd	r18, Y+4	; 0x04
     cb8:	3d 81       	ldd	r19, Y+5	; 0x05
     cba:	22 30       	cpi	r18, 0x02	; 2
     cbc:	31 05       	cpc	r19, r1
     cbe:	2c f4       	brge	.+10     	; 0xcca <DIO_SetPortValue+0x3a>
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	9d 81       	ldd	r25, Y+5	; 0x05
     cc4:	00 97       	sbiw	r24, 0x00	; 0
     cc6:	61 f0       	breq	.+24     	; 0xce0 <DIO_SetPortValue+0x50>
     cc8:	1f c0       	rjmp	.+62     	; 0xd08 <DIO_SetPortValue+0x78>
     cca:	2c 81       	ldd	r18, Y+4	; 0x04
     ccc:	3d 81       	ldd	r19, Y+5	; 0x05
     cce:	22 30       	cpi	r18, 0x02	; 2
     cd0:	31 05       	cpc	r19, r1
     cd2:	81 f0       	breq	.+32     	; 0xcf4 <DIO_SetPortValue+0x64>
     cd4:	8c 81       	ldd	r24, Y+4	; 0x04
     cd6:	9d 81       	ldd	r25, Y+5	; 0x05
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	91 05       	cpc	r25, r1
     cdc:	81 f0       	breq	.+32     	; 0xcfe <DIO_SetPortValue+0x6e>
     cde:	14 c0       	rjmp	.+40     	; 0xd08 <DIO_SetPortValue+0x78>
	{
	case PORT_A:
		PORTA=Value;
     ce0:	eb e3       	ldi	r30, 0x3B	; 59
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	80 83       	st	Z, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <DIO_SetPortValue+0x7e>
		break;
	case PORT_B:
		PORTB=Value;
     cea:	e8 e3       	ldi	r30, 0x38	; 56
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	80 83       	st	Z, r24
     cf2:	0d c0       	rjmp	.+26     	; 0xd0e <DIO_SetPortValue+0x7e>
		break;
	case PORT_C:
		PORTC=Value;
     cf4:	e5 e3       	ldi	r30, 0x35	; 53
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	80 83       	st	Z, r24
     cfc:	08 c0       	rjmp	.+16     	; 0xd0e <DIO_SetPortValue+0x7e>
		break;
	case PORT_D:
		PORTD=Value;
     cfe:	e2 e3       	ldi	r30, 0x32	; 50
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	80 83       	st	Z, r24
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <DIO_SetPortValue+0x7e>
		break;
	default: return ERROR_NOK;
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	9b 83       	std	Y+3, r25	; 0x03
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <DIO_SetPortValue+0x80>
	}
	return ERROR_OK;
     d0e:	1b 82       	std	Y+3, r1	; 0x03
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	cf 91       	pop	r28
     d1e:	df 91       	pop	r29
     d20:	08 95       	ret

00000d22 <DIO_GetPinValue>:


ErrorStatus DIO_GetPinValue(u8 Port,u8 Pin,u8 *Value)
{
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	27 97       	sbiw	r28, 0x07	; 7
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	6a 83       	std	Y+2, r22	; 0x02
     d3a:	5c 83       	std	Y+4, r21	; 0x04
     d3c:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3f 83       	std	Y+7, r19	; 0x07
     d46:	2e 83       	std	Y+6, r18	; 0x06
     d48:	4e 81       	ldd	r20, Y+6	; 0x06
     d4a:	5f 81       	ldd	r21, Y+7	; 0x07
     d4c:	41 30       	cpi	r20, 0x01	; 1
     d4e:	51 05       	cpc	r21, r1
     d50:	c1 f1       	breq	.+112    	; 0xdc2 <DIO_GetPinValue+0xa0>
     d52:	8e 81       	ldd	r24, Y+6	; 0x06
     d54:	9f 81       	ldd	r25, Y+7	; 0x07
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	91 05       	cpc	r25, r1
     d5a:	34 f4       	brge	.+12     	; 0xd68 <DIO_GetPinValue+0x46>
     d5c:	2e 81       	ldd	r18, Y+6	; 0x06
     d5e:	3f 81       	ldd	r19, Y+7	; 0x07
     d60:	21 15       	cp	r18, r1
     d62:	31 05       	cpc	r19, r1
     d64:	71 f0       	breq	.+28     	; 0xd82 <DIO_GetPinValue+0x60>
     d66:	8d c0       	rjmp	.+282    	; 0xe82 <DIO_GetPinValue+0x160>
     d68:	4e 81       	ldd	r20, Y+6	; 0x06
     d6a:	5f 81       	ldd	r21, Y+7	; 0x07
     d6c:	42 30       	cpi	r20, 0x02	; 2
     d6e:	51 05       	cpc	r21, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <DIO_GetPinValue+0x52>
     d72:	47 c0       	rjmp	.+142    	; 0xe02 <DIO_GetPinValue+0xe0>
     d74:	8e 81       	ldd	r24, Y+6	; 0x06
     d76:	9f 81       	ldd	r25, Y+7	; 0x07
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	91 05       	cpc	r25, r1
     d7c:	09 f4       	brne	.+2      	; 0xd80 <DIO_GetPinValue+0x5e>
     d7e:	61 c0       	rjmp	.+194    	; 0xe42 <DIO_GetPinValue+0x120>
     d80:	80 c0       	rjmp	.+256    	; 0xe82 <DIO_GetPinValue+0x160>
	{
	case PORT_A:
		*Value= (( (PINA) & (1<< Pin)) >> (Pin));
     d82:	e9 e3       	ldi	r30, 0x39	; 57
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	50 e0       	ldi	r21, 0x00	; 0
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_GetPinValue+0x7a>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	2a 95       	dec	r18
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_GetPinValue+0x76>
     da0:	9a 01       	movw	r18, r20
     da2:	28 23       	and	r18, r24
     da4:	39 23       	and	r19, r25
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	a9 01       	movw	r20, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <DIO_GetPinValue+0x92>
     db0:	55 95       	asr	r21
     db2:	47 95       	ror	r20
     db4:	8a 95       	dec	r24
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <DIO_GetPinValue+0x8e>
     db8:	ca 01       	movw	r24, r20
     dba:	eb 81       	ldd	r30, Y+3	; 0x03
     dbc:	fc 81       	ldd	r31, Y+4	; 0x04
     dbe:	80 83       	st	Z, r24
     dc0:	63 c0       	rjmp	.+198    	; 0xe88 <DIO_GetPinValue+0x166>
		break;
	case PORT_B:
		*Value= (( (PINB) & (1<< Pin)) >> (Pin));
     dc2:	e6 e3       	ldi	r30, 0x36	; 54
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_GetPinValue+0xba>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	2a 95       	dec	r18
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_GetPinValue+0xb6>
     de0:	9a 01       	movw	r18, r20
     de2:	28 23       	and	r18, r24
     de4:	39 23       	and	r19, r25
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	a9 01       	movw	r20, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <DIO_GetPinValue+0xd2>
     df0:	55 95       	asr	r21
     df2:	47 95       	ror	r20
     df4:	8a 95       	dec	r24
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <DIO_GetPinValue+0xce>
     df8:	ca 01       	movw	r24, r20
     dfa:	eb 81       	ldd	r30, Y+3	; 0x03
     dfc:	fc 81       	ldd	r31, Y+4	; 0x04
     dfe:	80 83       	st	Z, r24
     e00:	43 c0       	rjmp	.+134    	; 0xe88 <DIO_GetPinValue+0x166>
		break;
	case PORT_C:
		*Value= (( (PINC) & (1<< Pin)) >> (Pin));
     e02:	e3 e3       	ldi	r30, 0x33	; 51
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	8a 81       	ldd	r24, Y+2	; 0x02
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_GetPinValue+0xfa>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	2a 95       	dec	r18
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_GetPinValue+0xf6>
     e20:	9a 01       	movw	r18, r20
     e22:	28 23       	and	r18, r24
     e24:	39 23       	and	r19, r25
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	88 2f       	mov	r24, r24
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a9 01       	movw	r20, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_GetPinValue+0x112>
     e30:	55 95       	asr	r21
     e32:	47 95       	ror	r20
     e34:	8a 95       	dec	r24
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_GetPinValue+0x10e>
     e38:	ca 01       	movw	r24, r20
     e3a:	eb 81       	ldd	r30, Y+3	; 0x03
     e3c:	fc 81       	ldd	r31, Y+4	; 0x04
     e3e:	80 83       	st	Z, r24
     e40:	23 c0       	rjmp	.+70     	; 0xe88 <DIO_GetPinValue+0x166>
		break;
	case PORT_D:
		*Value= (( (PIND) & (1<< Pin)) >> (Pin));
     e42:	e0 e3       	ldi	r30, 0x30	; 48
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_GetPinValue+0x13a>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	2a 95       	dec	r18
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_GetPinValue+0x136>
     e60:	9a 01       	movw	r18, r20
     e62:	28 23       	and	r18, r24
     e64:	39 23       	and	r19, r25
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	a9 01       	movw	r20, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_GetPinValue+0x152>
     e70:	55 95       	asr	r21
     e72:	47 95       	ror	r20
     e74:	8a 95       	dec	r24
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_GetPinValue+0x14e>
     e78:	ca 01       	movw	r24, r20
     e7a:	eb 81       	ldd	r30, Y+3	; 0x03
     e7c:	fc 81       	ldd	r31, Y+4	; 0x04
     e7e:	80 83       	st	Z, r24
     e80:	03 c0       	rjmp	.+6      	; 0xe88 <DIO_GetPinValue+0x166>
		break;
	default: return ERROR_NOK;
     e82:	51 e0       	ldi	r21, 0x01	; 1
     e84:	5d 83       	std	Y+5, r21	; 0x05
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <DIO_GetPinValue+0x168>
	}
	return ERROR_OK;
     e88:	1d 82       	std	Y+5, r1	; 0x05
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e8c:	27 96       	adiw	r28, 0x07	; 7
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_GetPortValue>:

ErrorStatus DIO_GetPortValue(u8 Port,u8 *Value)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <DIO_GetPortValue+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <DIO_GetPortValue+0x8>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <DIO_GetPortValue+0xa>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	7b 83       	std	Y+3, r23	; 0x03
     eb0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3e 83       	std	Y+6, r19	; 0x06
     eba:	2d 83       	std	Y+5, r18	; 0x05
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	91 05       	cpc	r25, r1
     ec4:	e1 f0       	breq	.+56     	; 0xefe <DIO_GetPortValue+0x60>
     ec6:	2d 81       	ldd	r18, Y+5	; 0x05
     ec8:	3e 81       	ldd	r19, Y+6	; 0x06
     eca:	22 30       	cpi	r18, 0x02	; 2
     ecc:	31 05       	cpc	r19, r1
     ece:	2c f4       	brge	.+10     	; 0xeda <DIO_GetPortValue+0x3c>
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	61 f0       	breq	.+24     	; 0xef0 <DIO_GetPortValue+0x52>
     ed8:	27 c0       	rjmp	.+78     	; 0xf28 <DIO_GetPortValue+0x8a>
     eda:	2d 81       	ldd	r18, Y+5	; 0x05
     edc:	3e 81       	ldd	r19, Y+6	; 0x06
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	a1 f0       	breq	.+40     	; 0xf0c <DIO_GetPortValue+0x6e>
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	b1 f0       	breq	.+44     	; 0xf1a <DIO_GetPortValue+0x7c>
     eee:	1c c0       	rjmp	.+56     	; 0xf28 <DIO_GetPortValue+0x8a>
	{
	case PORT_A:
		*Value=PINA;
     ef0:	e9 e3       	ldi	r30, 0x39	; 57
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	ea 81       	ldd	r30, Y+2	; 0x02
     ef8:	fb 81       	ldd	r31, Y+3	; 0x03
     efa:	80 83       	st	Z, r24
     efc:	18 c0       	rjmp	.+48     	; 0xf2e <DIO_GetPortValue+0x90>
		break;
	case PORT_B:
		*Value=PINB;
     efe:	e6 e3       	ldi	r30, 0x36	; 54
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	ea 81       	ldd	r30, Y+2	; 0x02
     f06:	fb 81       	ldd	r31, Y+3	; 0x03
     f08:	80 83       	st	Z, r24
     f0a:	11 c0       	rjmp	.+34     	; 0xf2e <DIO_GetPortValue+0x90>
		break;
	case PORT_C:
		*Value=PINC;
     f0c:	e3 e3       	ldi	r30, 0x33	; 51
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	ea 81       	ldd	r30, Y+2	; 0x02
     f14:	fb 81       	ldd	r31, Y+3	; 0x03
     f16:	80 83       	st	Z, r24
     f18:	0a c0       	rjmp	.+20     	; 0xf2e <DIO_GetPortValue+0x90>
		break;
	case PORT_D:
		*Value=PIND;
     f1a:	e0 e3       	ldi	r30, 0x30	; 48
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	ea 81       	ldd	r30, Y+2	; 0x02
     f22:	fb 81       	ldd	r31, Y+3	; 0x03
     f24:	80 83       	st	Z, r24
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <DIO_GetPortValue+0x90>
		break;
	default: return ERROR_NOK;
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	9c 83       	std	Y+4, r25	; 0x04
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <DIO_GetPortValue+0x92>
	}
	return ERROR_OK;
     f2e:	1c 82       	std	Y+4, r1	; 0x04
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f32:	26 96       	adiw	r28, 0x06	; 6
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <DIO_Dimmer_Init>:


ErrorStatus DIO_Dimmer_Init(void)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
	u8 ErrorStatus;

	ErrorStatus=DIO_SetPinDirection(PORT_A,PIN0,INPUT);
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_SetPinDirection>
     f58:	89 83       	std	Y+1, r24	; 0x01
	ErrorStatus|=DIO_SetPinDirection(PORT_A,PIN1,INPUT);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_SetPinDirection>
     f64:	98 2f       	mov	r25, r24
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	89 2b       	or	r24, r25
     f6a:	89 83       	std	Y+1, r24	; 0x01

	ErrorStatus|=DIO_SetPinValue(PORT_A,PIN0,HIGH);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_SetPinValue>
     f76:	98 2f       	mov	r25, r24
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	89 2b       	or	r24, r25
     f7c:	89 83       	std	Y+1, r24	; 0x01
	ErrorStatus|=DIO_SetPinValue(PORT_A,PIN1,HIGH);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	61 e0       	ldi	r22, 0x01	; 1
     f82:	41 e0       	ldi	r20, 0x01	; 1
     f84:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_SetPinValue>
     f88:	98 2f       	mov	r25, r24
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	89 2b       	or	r24, r25
     f8e:	89 83       	std	Y+1, r24	; 0x01

	ErrorStatus|=DIO_SetPinDirection(PORT_A,PIN2,OUTPUT);
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	62 e0       	ldi	r22, 0x02	; 2
     f94:	41 e0       	ldi	r20, 0x01	; 1
     f96:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_SetPinDirection>
     f9a:	98 2f       	mov	r25, r24
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	89 2b       	or	r24, r25
     fa0:	89 83       	std	Y+1, r24	; 0x01

	ErrorStatus|=DIO_SetPinDirection(PORT_D,PIN0,INPUT);
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_SetPinDirection>
     fac:	98 2f       	mov	r25, r24
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	89 2b       	or	r24, r25
     fb2:	89 83       	std	Y+1, r24	; 0x01
	ErrorStatus|=DIO_SetPinDirection(PORT_D,PIN1,OUTPUT);
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	41 e0       	ldi	r20, 0x01	; 1
     fba:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <DIO_SetPinDirection>
     fbe:	98 2f       	mov	r25, r24
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	89 2b       	or	r24, r25
     fc4:	89 83       	std	Y+1, r24	; 0x01

	return ErrorStatus;
     fc6:	89 81       	ldd	r24, Y+1	; 0x01

}
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <COMM_Init>:
static u8 TxBuffer[NUMBER_OF_SIGNALS];
static u8 RxBuffer[NUMBER_OF_SIGNALS];


ErrorStatus COMM_Init(void)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	return UART_Init();
     fd8:	0e 94 0f 01 	call	0x21e	; 0x21e <UART_Init>
}
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <COMM_Send>:

ErrorStatus COMM_Send(u8 ID,u8 Data)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <COMM_Send+0x6>
     fe8:	0f 92       	push	r0
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	8a 83       	std	Y+2, r24	; 0x02
     ff0:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus ERROR=ERROR_OK;
     ff2:	19 82       	std	Y+1, r1	; 0x01

	if(ID<NUMBER_OF_SIGNALS)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	88 23       	and	r24, r24
     ff8:	49 f4       	brne	.+18     	; 0x100c <COMM_Send+0x2a>
	{
		TxBuffer[ID]=Data;
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	fc 01       	movw	r30, r24
    1002:	e5 57       	subi	r30, 0x75	; 117
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	80 83       	st	Z, r24
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <COMM_Send+0x2e>
	}
	else
	{
		ERROR=ERROR_NOK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ERROR;
    1010:	89 81       	ldd	r24, Y+1	; 0x01
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <COMM_Receive>:

ErrorStatus COMM_Receive(u8 ID,u8 *Data)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	00 d0       	rcall	.+0      	; 0x1024 <COMM_Receive+0x6>
    1024:	00 d0       	rcall	.+0      	; 0x1026 <COMM_Receive+0x8>
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	8a 83       	std	Y+2, r24	; 0x02
    102c:	7c 83       	std	Y+4, r23	; 0x04
    102e:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus ERROR=ERROR_OK;
    1030:	19 82       	std	Y+1, r1	; 0x01

	if(ID<NUMBER_OF_SIGNALS)
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	88 23       	and	r24, r24
    1036:	59 f4       	brne	.+22     	; 0x104e <COMM_Receive+0x30>
	{
		*Data=RxBuffer[ID];
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	fc 01       	movw	r30, r24
    1040:	e4 57       	subi	r30, 0x74	; 116
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	eb 81       	ldd	r30, Y+3	; 0x03
    1048:	fc 81       	ldd	r31, Y+4	; 0x04
    104a:	80 83       	st	Z, r24
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <COMM_Receive+0x34>
	}
	else
	{
		ERROR=ERROR_NOK;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	89 83       	std	Y+1, r24	; 0x01
	}

	return ERROR;
    1052:	89 81       	ldd	r24, Y+1	; 0x01
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <COMM_Tx_MainFunction>:


ErrorStatus COMM_Tx_MainFunction(void)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	00 d0       	rcall	.+0      	; 0x1068 <COMM_Tx_MainFunction+0x6>
    1068:	00 d0       	rcall	.+0      	; 0x106a <COMM_Tx_MainFunction+0x8>
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus ERROR=ERROR_OK;
    106e:	1c 82       	std	Y+4, r1	; 0x04
	u8 CurrentPDU,CurrentSignal;
	u8 CurrentPDU_SignalID;

	for(CurrentPDU=0;CurrentPDU<NUMBER_OF_PDUS;CurrentPDU++)
    1070:	1b 82       	std	Y+3, r1	; 0x03
    1072:	b3 c0       	rjmp	.+358    	; 0x11da <COMM_Tx_MainFunction+0x178>
	{
		PDU[CurrentPDU].Data=0;
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	c9 01       	movw	r24, r18
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	fc 01       	movw	r30, r24
    108e:	e8 58       	subi	r30, 0x88	; 136
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	10 82       	st	Z, r1
		for(CurrentSignal=0;CurrentSignal<PDU[CurrentPDU].NumberOfSignals;CurrentSignal++)
    1094:	1a 82       	std	Y+2, r1	; 0x02
    1096:	57 c0       	rjmp	.+174    	; 0x1146 <COMM_Tx_MainFunction+0xe4>
		{
			CurrentPDU_SignalID=PDU[CurrentPDU].SignalsID[CurrentSignal];
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	48 2f       	mov	r20, r24
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	c9 01       	movw	r24, r18
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	82 0f       	add	r24, r18
    10b4:	93 1f       	adc	r25, r19
    10b6:	84 0f       	add	r24, r20
    10b8:	95 1f       	adc	r25, r21
    10ba:	fc 01       	movw	r30, r24
    10bc:	e7 58       	subi	r30, 0x87	; 135
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	80 81       	ld	r24, Z
    10c2:	89 83       	std	Y+1, r24	; 0x01

			PDU[CurrentPDU].Data|= TxBuffer[CurrentPDU_SignalID] << Signal[CurrentPDU_SignalID].Startbit;
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	48 2f       	mov	r20, r24
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	c9 01       	movw	r24, r18
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	82 0f       	add	r24, r18
    10e0:	93 1f       	adc	r25, r19
    10e2:	fc 01       	movw	r30, r24
    10e4:	e8 58       	subi	r30, 0x88	; 136
    10e6:	ff 4f       	sbci	r31, 0xFF	; 255
    10e8:	80 81       	ld	r24, Z
    10ea:	68 2f       	mov	r22, r24
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	fc 01       	movw	r30, r24
    10f4:	e5 57       	subi	r30, 0x75	; 117
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	80 81       	ld	r24, Z
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	88 2f       	mov	r24, r24
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	fc 01       	movw	r30, r24
    110a:	ea 57       	subi	r30, 0x7A	; 122
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	80 81       	ld	r24, Z
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	f9 01       	movw	r30, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <COMM_Tx_MainFunction+0xba>
    1118:	ee 0f       	add	r30, r30
    111a:	ff 1f       	adc	r31, r31
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <COMM_Tx_MainFunction+0xb6>
    1120:	cf 01       	movw	r24, r30
    1122:	86 2b       	or	r24, r22
    1124:	28 2f       	mov	r18, r24
    1126:	ca 01       	movw	r24, r20
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	84 0f       	add	r24, r20
    1136:	95 1f       	adc	r25, r21
    1138:	fc 01       	movw	r30, r24
    113a:	e8 58       	subi	r30, 0x88	; 136
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	20 83       	st	Z, r18
	u8 CurrentPDU_SignalID;

	for(CurrentPDU=0;CurrentPDU<NUMBER_OF_PDUS;CurrentPDU++)
	{
		PDU[CurrentPDU].Data=0;
		for(CurrentSignal=0;CurrentSignal<PDU[CurrentPDU].NumberOfSignals;CurrentSignal++)
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	8f 5f       	subi	r24, 0xFF	; 255
    1144:	8a 83       	std	Y+2, r24	; 0x02
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	c9 01       	movw	r24, r18
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	fc 01       	movw	r30, r24
    1160:	e1 58       	subi	r30, 0x81	; 129
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	90 81       	ld	r25, Z
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	89 17       	cp	r24, r25
    116a:	08 f4       	brcc	.+2      	; 0x116e <COMM_Tx_MainFunction+0x10c>
    116c:	95 cf       	rjmp	.-214    	; 0x1098 <COMM_Tx_MainFunction+0x36>
			CurrentPDU_SignalID=PDU[CurrentPDU].SignalsID[CurrentSignal];

			PDU[CurrentPDU].Data|= TxBuffer[CurrentPDU_SignalID] << Signal[CurrentPDU_SignalID].Startbit;
		}

		ERROR|=UART_SendData( ( PDU[CurrentPDU].ID <<6 ) | PDU[CurrentPDU].Data );
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	c9 01       	movw	r24, r18
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	82 0f       	add	r24, r18
    1184:	93 1f       	adc	r25, r19
    1186:	fc 01       	movw	r30, r24
    1188:	e9 58       	subi	r30, 0x89	; 137
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	80 81       	ld	r24, Z
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	00 24       	eor	r0, r0
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	07 94       	ror	r0
    119a:	96 95       	lsr	r25
    119c:	87 95       	ror	r24
    119e:	07 94       	ror	r0
    11a0:	98 2f       	mov	r25, r24
    11a2:	80 2d       	mov	r24, r0
    11a4:	48 2f       	mov	r20, r24
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	c9 01       	movw	r24, r18
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	fc 01       	movw	r30, r24
    11c0:	e8 58       	subi	r30, 0x88	; 136
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	80 81       	ld	r24, Z
    11c6:	84 2b       	or	r24, r20
    11c8:	0e 94 18 02 	call	0x430	; 0x430 <UART_SendData>
    11cc:	98 2f       	mov	r25, r24
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	89 2b       	or	r24, r25
    11d2:	8c 83       	std	Y+4, r24	; 0x04
{
	ErrorStatus ERROR=ERROR_OK;
	u8 CurrentPDU,CurrentSignal;
	u8 CurrentPDU_SignalID;

	for(CurrentPDU=0;CurrentPDU<NUMBER_OF_PDUS;CurrentPDU++)
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	88 23       	and	r24, r24
    11de:	09 f4       	brne	.+2      	; 0x11e2 <COMM_Tx_MainFunction+0x180>
    11e0:	49 cf       	rjmp	.-366    	; 0x1074 <COMM_Tx_MainFunction+0x12>
		}

		ERROR|=UART_SendData( ( PDU[CurrentPDU].ID <<6 ) | PDU[CurrentPDU].Data );
	}

	return ERROR;
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04

}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <COMM_Rx_MainFunction>:


ErrorStatus COMM_Rx_MainFunction(void)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <COMM_Rx_MainFunction+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <COMM_Rx_MainFunction+0x8>
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <COMM_Rx_MainFunction+0xa>
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus ERROR=ERROR_OK;
    1200:	1d 82       	std	Y+5, r1	; 0x05

	u8 RxData,PDUID;
	u8 CurrentPDU,CurrentSignal;
	u8 CurrentPDU_SignalID;

	ERROR=UART_ReceiveData(&RxData);
    1202:	ce 01       	movw	r24, r28
    1204:	06 96       	adiw	r24, 0x06	; 6
    1206:	0e 94 3a 02 	call	0x474	; 0x474 <UART_ReceiveData>
    120a:	8d 83       	std	Y+5, r24	; 0x05

	PDUID=RxData>>6;
    120c:	8e 81       	ldd	r24, Y+6	; 0x06
    120e:	82 95       	swap	r24
    1210:	86 95       	lsr	r24
    1212:	86 95       	lsr	r24
    1214:	83 70       	andi	r24, 0x03	; 3
    1216:	8c 83       	std	Y+4, r24	; 0x04

	if(ERROR_OK==ERROR)
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	88 23       	and	r24, r24
    121c:	09 f0       	breq	.+2      	; 0x1220 <COMM_Rx_MainFunction+0x2e>
    121e:	a1 c0       	rjmp	.+322    	; 0x1362 <COMM_Rx_MainFunction+0x170>
	{
		for(CurrentPDU=0;CurrentPDU<NUMBER_OF_PDUS;CurrentPDU++)
    1220:	1b 82       	std	Y+3, r1	; 0x03
    1222:	9b c0       	rjmp	.+310    	; 0x135a <COMM_Rx_MainFunction+0x168>
		{
			if(PDUID==PDU[CurrentPDU].ID)
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	c9 01       	movw	r24, r18
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	82 0f       	add	r24, r18
    123a:	93 1f       	adc	r25, r19
    123c:	fc 01       	movw	r30, r24
    123e:	e9 58       	subi	r30, 0x89	; 137
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	90 81       	ld	r25, Z
    1244:	8c 81       	ldd	r24, Y+4	; 0x04
    1246:	98 17       	cp	r25, r24
    1248:	09 f0       	breq	.+2      	; 0x124c <COMM_Rx_MainFunction+0x5a>
    124a:	84 c0       	rjmp	.+264    	; 0x1354 <COMM_Rx_MainFunction+0x162>
			{
				for(CurrentSignal=0;CurrentSignal<PDU[CurrentPDU].NumberOfSignals;CurrentSignal++)
    124c:	1a 82       	std	Y+2, r1	; 0x02
    124e:	6e c0       	rjmp	.+220    	; 0x132c <COMM_Rx_MainFunction+0x13a>
				{
					CurrentPDU_SignalID=PDU[CurrentPDU].SignalsID[CurrentSignal];
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	48 2f       	mov	r20, r24
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	c9 01       	movw	r24, r18
    125e:	88 0f       	add	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	82 0f       	add	r24, r18
    126c:	93 1f       	adc	r25, r19
    126e:	84 0f       	add	r24, r20
    1270:	95 1f       	adc	r25, r21
    1272:	fc 01       	movw	r30, r24
    1274:	e7 58       	subi	r30, 0x87	; 135
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	80 81       	ld	r24, Z
    127a:	89 83       	std	Y+1, r24	; 0x01

					RxBuffer[PDU[CurrentPDU].SignalsID[CurrentSignal]]=
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	48 2f       	mov	r20, r24
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	c9 01       	movw	r24, r18
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	82 0f       	add	r24, r18
    1298:	93 1f       	adc	r25, r19
    129a:	84 0f       	add	r24, r20
    129c:	95 1f       	adc	r25, r21
    129e:	fc 01       	movw	r30, r24
    12a0:	e7 58       	subi	r30, 0x87	; 135
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	80 81       	ld	r24, Z
    12a6:	68 2f       	mov	r22, r24
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	8e 81       	ldd	r24, Y+6	; 0x06
    12ac:	48 2f       	mov	r20, r24
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	fc 01       	movw	r30, r24
    12bc:	ea 57       	subi	r30, 0x7A	; 122
    12be:	ff 4f       	sbci	r31, 0xFF	; 255
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	fc 01       	movw	r30, r24
    12d2:	e9 57       	subi	r30, 0x79	; 121
    12d4:	ff 4f       	sbci	r31, 0xFF	; 255
    12d6:	80 81       	ld	r24, Z
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	28 0f       	add	r18, r24
    12de:	39 1f       	adc	r19, r25
    12e0:	88 e0       	ldi	r24, 0x08	; 8
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	82 1b       	sub	r24, r18
    12e6:	93 0b       	sbc	r25, r19
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <COMM_Rx_MainFunction+0xfc>
    12ea:	44 0f       	add	r20, r20
    12ec:	55 1f       	adc	r21, r21
    12ee:	8a 95       	dec	r24
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <COMM_Rx_MainFunction+0xf8>
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	fc 01       	movw	r30, r24
    12fe:	e9 57       	subi	r30, 0x79	; 121
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	80 81       	ld	r24, Z
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	88 e0       	ldi	r24, 0x08	; 8
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	82 1b       	sub	r24, r18
    130e:	93 0b       	sbc	r25, r19
    1310:	9a 01       	movw	r18, r20
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <COMM_Rx_MainFunction+0x126>
    1314:	35 95       	asr	r19
    1316:	27 95       	ror	r18
    1318:	8a 95       	dec	r24
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <COMM_Rx_MainFunction+0x122>
    131c:	c9 01       	movw	r24, r18
    131e:	fb 01       	movw	r30, r22
    1320:	e4 57       	subi	r30, 0x74	; 116
    1322:	ff 4f       	sbci	r31, 0xFF	; 255
    1324:	80 83       	st	Z, r24
	{
		for(CurrentPDU=0;CurrentPDU<NUMBER_OF_PDUS;CurrentPDU++)
		{
			if(PDUID==PDU[CurrentPDU].ID)
			{
				for(CurrentSignal=0;CurrentSignal<PDU[CurrentPDU].NumberOfSignals;CurrentSignal++)
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	8a 83       	std	Y+2, r24	; 0x02
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	c9 01       	movw	r24, r18
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	82 0f       	add	r24, r18
    1342:	93 1f       	adc	r25, r19
    1344:	fc 01       	movw	r30, r24
    1346:	e1 58       	subi	r30, 0x81	; 129
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	90 81       	ld	r25, Z
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	89 17       	cp	r24, r25
    1350:	08 f4       	brcc	.+2      	; 0x1354 <COMM_Rx_MainFunction+0x162>
    1352:	7e cf       	rjmp	.-260    	; 0x1250 <COMM_Rx_MainFunction+0x5e>

	PDUID=RxData>>6;

	if(ERROR_OK==ERROR)
	{
		for(CurrentPDU=0;CurrentPDU<NUMBER_OF_PDUS;CurrentPDU++)
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	8b 83       	std	Y+3, r24	; 0x03
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	88 23       	and	r24, r24
    135e:	09 f4       	brne	.+2      	; 0x1362 <COMM_Rx_MainFunction+0x170>
    1360:	61 cf       	rjmp	.-318    	; 0x1224 <COMM_Rx_MainFunction+0x32>
	else
	{
		/* Do Nothing  */
	}

	return ERROR;
    1362:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1364:	26 96       	adiw	r28, 0x06	; 6
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <main>:
#include "BSW/Scheduler/Scheduler.h"
#include "RTE/RTE.h"


void main(void)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	Scheduler_StartOS();
    137e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Scheduler_StartOS>
    1382:	ff cf       	rjmp	.-2      	; 0x1382 <main+0xc>

00001384 <_exit>:
    1384:	f8 94       	cli

00001386 <__stop_program>:
    1386:	ff cf       	rjmp	.-2      	; 0x1386 <__stop_program>
